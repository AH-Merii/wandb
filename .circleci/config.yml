version: 2.1

orbs:
  win: circleci/windows@2.4.0
  slack: circleci/slack@4.9.3
  go: circleci/go@1.3.0
  gke: circleci/gcp-gke@1.4.0

parameters:
  manual:
    type: boolean
    default: false
  manual_test:
    type: boolean
    default: false
  manual_win:
    type: boolean
    default: false
  manual_mac:
    type: boolean
    default: false
  manual_test_image:
    type: string
    default: "python:3.7"
  manual_test_toxenv:
    type: string
    default: "py37"
  manual_win_toxenv:
    type: string
    default: "py37"
  manual_mac_toxenv:
    type: string
    default: "py37"
  manual_test_name:
    type: string
    default: "man-lin-py37"
  manual_win_name:
    type: string
    default: "man-win-py37"
  manual_mac_name:
    type: string
    default: "man-mac-py37"
  manual_parallelism:
    type: integer
    default: 1
  manual_xdist:
    type: integer
    default: 1
  tox_version:
    type: string
    default: "3.24.0"
  container_registry:
    type: string
    default: "gcr.io"
  gcp_cluster_name:
    type: string
    default: "gke-yea"
  manual_nightly:
    type: boolean
    default: false
  manual_nightly_git_branch:
    type: string
    default: master
  manual_nightly_slack_notify:
    type: boolean
    default: false
  manual_nightly_execute_shard_standalone_cpu:
    type: boolean
    default: false
  manual_nightly_execute_shard_standalone_gpu:
    type: boolean
    default: false
  manual_nightly_execute_shard_standalone_tpu:
    type: boolean
    default: false
  manual_nightly_execute_shard_standalone_local:
    type: boolean
    default: false
  manual_nightly_execute_shard_kfp:
    type: boolean
    default: false
  wandb_server_tag:
    type: string
    default: "master"

commands:
  save-kfp-cache:
    description: "Save kfp environment to cache"
    steps:
      - save_cache:
          paths:
            - /opt/circleci/.pyenv/
            - ./.tox
          key: v0.31-kfpenv-{{ .Environment.CIRCLE_BRANCH }}-{{ .Environment.CIRCLE_JOB }}-{{ checksum "tox.ini" }}-{{ checksum "setup.py" }}-{{ checksum "requirements.txt" }}-{{ checksum "requirements_dev.txt" }}

  restore-kfp-cache:
    description: "Restore kfp environment from cache"
    steps:
      - restore_cache:
          keys:
            - v0.31-kfpenv-{{ .Environment.CIRCLE_BRANCH }}-{{ .Environment.CIRCLE_JOB }}-{{ checksum "tox.ini" }}-{{ checksum "setup.py" }}-{{ checksum "requirements.txt" }}-{{ checksum "requirements_dev.txt" }}
            - v0.31-kfpenv-master-{{ .Environment.CIRCLE_JOB }}-{{ checksum "tox.ini" }}-{{ checksum "setup.py" }}-{{ checksum "requirements.txt" }}-{{ checksum "requirements_dev.txt" }}

  save-test-results:
    description: "Save test results"
    steps:
      - unless:
          condition: << pipeline.parameters.manual >>
          steps:
            - store_test_results:
                path: test-results
            - store_artifacts:
                path: test-results
            - store_artifacts:
                path: mypy-results
            - store_artifacts:
                path: cover-results

  setup_docker_buildx:
    description: Enable remote docker, and install the expanded `buildx` command for the CLI. Only works on alpine-based images.
    parameters:
      docker_layer_caching:
        type: boolean
        default: false
    steps:
      - setup_remote_docker:
          version: 20.10.12
          docker_layer_caching: << parameters.docker_layer_caching >>
      - run: apk add docker-cli-buildx=0.8.2-r2  --repository=http://dl-cdn.alpinelinux.org/alpine/edge/community

  setup_gcloud:
    parameters:
      cluster:
        description: "cluster name"
        type: string
        default: << pipeline.parameters.gcp_cluster_name >>
    steps:
      - run:
          name: "Setup gcloud"
          command: |
            echo $GCLOUD_SERVICE_KEY > ${HOME}/gcloud-service-key.json
            gcloud auth activate-service-account --key-file=${HOME}/gcloud-service-key.json
            gcloud --quiet config set project $GOOGLE_PROJECT_ID
            gcloud --quiet config set compute/zone $GOOGLE_COMPUTE_ZONE
            gcloud auth configure-docker --quiet << pipeline.parameters.container_registry >>
          environment:
            GKE_CLUSTER_NAME: <<parameters.cluster >>

  create_gke_cluster:
    parameters:
      cluster:
        description: "cluster name"
        type: string
        default: << pipeline.parameters.gcp_cluster_name >>
      no-output-timeout:
        description: >
          Elapsed time that the cluster creation command can run on CircleCI without
          output. The string is a decimal with unit suffix, such as “20m”, “1.25h”,
          “5s”
        type: string
        default: 15m
      num_nodes:
        description: "Number of nodes to create"
        type: integer
        default: 1
      machine_type:
        description: "GKE cluster machine type"
        type: string
        default: "n1-standard-4"
      disk_size:
        description: "GKE cluster disk size"
        type: integer
        default: 100
      disk_type:
        description: "GKE cluster disk type"
        type: string
        default: "pd-ssd"
      gpu_type:
        description: "GKE cluster GPU type"
        type: string
        default: "nvidia-tesla-t4"
      gpu_count:
        description: "GKE cluster GPU count"
        type: integer
        default: 2
    steps:
      - setup_gcloud
      - run:
          name: "Check if cluster exists and delete if it does"
          command: |
            cluster_exists=$(gcloud container clusters list --filter="name=<< parameters.cluster >>" --format="value(name)" | wc -l | xargs)
            gcloud container clusters list --filter="name=<< parameters.cluster >>" --format="value(name)"
            if [ $? -eq 0 ] && [ $cluster_exists -eq 1 ]; then
              gcloud container clusters delete << parameters.cluster >> --quiet
            fi
            exit 0
      - run:
          name: "Create GKE cluster"
          command: |
            gcloud container clusters create $GKE_CLUSTER_NAME \
            --num-nodes=<< parameters.num_nodes >> --machine-type=<< parameters.machine_type >> \
            --disk-size=<< parameters.disk_size >> --disk-type=<< parameters.disk_type >> \
            --accelerator=type=<< parameters.gpu_type >>,count=<< parameters.gpu_count >>
          environment:
            GKE_CLUSTER_NAME: << parameters.cluster >>
          no_output_timeout: << parameters.no-output-timeout>>

  get_gke_cluster_credentials:
    parameters:
      cluster:
        description: "cluster name"
        type: string
        default: << pipeline.parameters.gcp_cluster_name >>
    steps:
      - run:
          name: "Get gke cluster credentials"
          command: |
            gcloud components install gke-gcloud-auth-plugin
            gcloud container clusters get-credentials << parameters.cluster >>
          environment:
            GKE_CLUSTER_NAME: << parameters.cluster >>

jobs:
  tox-base:
    parameters:
      python_version_major:
        type: integer
        default: 3
      python_version_minor:
        type: integer
        default: 7
      toxenv:
        type: string
      shard:
        type: string
        default: "base"
      notify_on_failure:
        type: boolean
        default: false
    docker:
      - image: "python:<<parameters.python_version_major>>.<<parameters.python_version_minor>>"
    resource_class: large
    working_directory: /mnt/ramdisk
    steps:
      - checkout
      - run:
          name: Install system deps
          command: |
            apt-get update && apt-get install -y libsndfile1 ffmpeg
      - run:
          name: Install python dependencies
          command: |
            pip install tox==<< pipeline.parameters.tox_version >>
            pip install -U pip
          no_output_timeout: 5m
      - run:
          name: Run tests
          no_output_timeout: 25m
          command: |
            tox -v -e << parameters.toxenv >>
      - save-test-results
      # conditionally post a notification to slack if the job failed
      - when:
          condition: << parameters.notify_on_failure >>
          steps:
            - slack/notify:
                event: fail
                template: basic_fail_1
                mentions: "@channel"
                # taken from slack-secrets context
                channel: $SLACK_SDK_NIGHTLY_CI_CHANNEL

  pytest:
    parameters:
      python_version_major:
        type: integer
        default: 3
      python_version_minor:
        type: integer
        default: 7
      notify_on_failure:
        type: boolean
        default: false
    docker:
      - image: "python:<<parameters.python_version_major>>.<<parameters.python_version_minor>>"
      - image: gcr.io/wandb-production/local-testcontainer:<< pipeline.parameters.wandb_server_tag >>
        auth:
          username: _json_key
          password: $GCP_SERVICE_ACCOUNT_JSON_DECODED
        environment:
          CI: 1
          DISABLE_TELEMETRY: true
          GORILLA_EMAIL_SINK: mysql://wandb_local:wandb_local@127.0.0.1:3306/wandb_local
          GORILLA_FRONTEND_HOST: http://localhost:8080
          GOOGLE_APPLICATION_CREDENTIALS: /home/wandb/gcs-key.json
          LOCAL_INTEGRATION_TEST_HELPERS: true
          GORILLA_RAMP_WRITE_SESSION_TO_DB: 1.0
          GORILLA_RAMP_READ_SESSION_FROM_DB: 1.0
          WANDB_ENABLE_TEST_CONTAINER: true
    resource_class: xlarge
    working_directory: /mnt/ramdisk
    steps:
      - checkout
      - run:
          name: Install system deps
          command: |
            apt-get update && apt-get install -y libsndfile1 ffmpeg
      - run:
          name: Install python dependencies
          command: |
            pip install tox==<< pipeline.parameters.tox_version >>
            pip install -U pip
            while ! curl http://localhost:8080/healthz; do sleep 1; done
          no_output_timeout: 5m
      - run:
          name: Run tests
          no_output_timeout: 25m
          command: |
            tox -v -e py<<parameters.python_version_major>><<parameters.python_version_minor>>,covercircle \
              -- --wandb-server-tag << pipeline.parameters.wandb_server_tag >> tests/unit_tests_new
      - save-test-results
      # conditionally post a notification to slack if the job failed
      - when:
          condition: << parameters.notify_on_failure >>
          steps:
            - slack/notify:
                event: fail
                template: basic_fail_1
                mentions: "@channel"
                # taken from slack-secrets context
                channel: $SLACK_SDK_NIGHTLY_CI_CHANNEL

  pytest-mock-server:
    resource_class: xlarge
    parameters:
      python_version_major:
        type: integer
        default: 3
      python_version_minor:
        type: integer
        default: 7
      notify_on_failure:
        type: boolean
        default: false
    docker:
      - image: "python:<<parameters.python_version_major>>.<<parameters.python_version_minor>>"
    working_directory: /mnt/ramdisk
    steps:
      - checkout
      - run:
          name: Install system deps
          command: apt-get update && apt-get install -y libsndfile1 ffmpeg
      - run:
          name: Install python dependencies
          command: |
            pip install tox==<< pipeline.parameters.tox_version >>
      - run:
          name: Run tests
          command: |
            tox -v -e py<<parameters.python_version_major>><<parameters.python_version_minor>>,covercircle
          no_output_timeout: 25m
      - save-test-results
      # conditionally post a notification to slack if the job failed
      - when:
          condition: << parameters.notify_on_failure >>
          steps:
            - slack/notify:
                event: fail
                template: basic_fail_1
                mentions: "@channel"
                # taken from slack-secrets context
                channel: $SLACK_SDK_NIGHTLY_CI_CHANNEL

workflows:
  main:
    when:
      and:
        - not:
            equal:
              - scheduled_pipeline
              - << pipeline.trigger_source >>
        - not: << pipeline.parameters.manual >>
    jobs:
      - tox-base:
          name: "code-check"
          python_version_minor: 8
          toxenv: "protocheck,generatecheck,mypy,mypy-report,pyupgrade,black,flake8,docstrings"
      - pytest:
          matrix:
            parameters:
              python_version_major: [ 3 ]
              python_version_minor: [ 6, 7, 8, 9, 10 ]
          name: "unit-s_base-lin-py<<matrix.python_version_major>><<matrix.python_version_minor>>"
      #
      # functional linux tests
      #
      - tox-base:
          matrix:
            parameters:
              python_version_major: [ 3 ]
              python_version_minor: [ 7, 10 ]
              shard:
                - "base"
                - "sklearn"
                - "metaflow"
                - "tf115"
                - "tf21"
                - "tf25"
                - "tf26"
                - "service"
                - "noml"
                - "grpc"
                - "docs"
          name: "func-s_<<matrix.shard>>-lin-py<<matrix.python_version_major>><<matrix.python_version_minor>>"
          toxenv: "func-s_<<matrix.shard>>-py<<matrix.python_version_major>><<matrix.python_version_minor>>,func-covercircle"
      # import tests
      - tox-base:
          matrix:
            parameters:
              python_version_major: [ 3 ]
              python_version_minor: [ 7 ]
              shard:
                - "imports1"
                - "imports2"
                - "imports3"
                - "imports4"
                - "imports5"
                - "imports6"
                - "imports7"
                - "imports8"
                - "imports9"
                - "imports10"
                - "imports11"
          name: "func-s_<<matrix.shard>>-lin-py<<matrix.python_version_major>><<matrix.python_version_minor>>"
          toxenv: "func-s_<<matrix.shard>>-py<<matrix.python_version_major>><<matrix.python_version_minor>>"
