version: 2.1

orbs:
  slack: circleci/slack@4.12.5

parameters:
  python_version:
    description: "Python version"
    type: string
    default: "3.8"
  go_version:
    description: "Go version"
    type: string
    default: "1.21.4"

commands:
  install_go:
    description: "Install Go with the specified version and system"
    parameters:
      version:
        description: "Go version"
        type: string
        default: << pipeline.parameters.go_version >>
    steps:
      - run:
          name: Install Go
          command: |
            file_name=go<<parameters.version>>
            case $(uname -m) in
              x86_64)
                arch="amd64"
                ;;
              arm64)
                arch="arm64"
                ;;
              *)
                echo "Unsupported architecture: $(uname -m)"
                exit 1
                ;;
            esac
            case $(uname | tr '[:upper:]' '[:lower:]') in
              msys*)
                file_name=$file_name.windows-$arch.zip
                suffix="zip"
                ;;
              darwin*)
                file_name=$file_name.darwin-$arch.tar.gz
                suffix="tar.gz"
                ;;
              linux*)
                file_name=$file_name.linux-$arch.tar.gz
                suffix="tar.gz"
                ;;
              *)
                echo "Unsupported OS: $(uname)"
                exit 1
                ;;
            esac
            curl -L -o $file_name https://go.dev/dl/$file_name
            case $suffix in
              zip)
                unzip -q $file_name -d $HOME
                ;;
              tar.gz)
                tar -C $HOME -xzf $file_name
                ;;
            esac
            rm $file_name
            echo 'export PATH="$HOME/go/bin:$PATH"' >> "$BASH_ENV"
            source "$BASH_ENV"
            go version
          no_output_timeout: 1m
  codecov_upload:
    description: "Upload coverage to codecov"
    parameters:
      arguments:
        description: "Arguments to pass to codecov"
        type: string
        default: ""
    steps:
      - run:
          name: Download codecov
          command: |
            os = $(uname | tr '[:upper:]' '[:lower:]')
            case $os in
              msys*)
                system="windows"
                file_name=codecov.exe
                ;;
              darwin*)
                system="macos"
                file_name=codecov
                ;;
              linux*)
                system="linux"
                file_name=codecov
                ;;
              *)
                echo "Unsupported OS: $(uname)"
                exit 1
                ;;
            esac

            curl -L -o $file_name https://codecov.io/latest/${system}/$file_name
            chmod +x $file_name

            case $os in
              darwin*)
                if [ "$(uname -m)" = "arm64" ]; then
                  softwareupdate --install-rosetta --agree-to-license
                  arch -x86_64 ./$file_name << parameters.arguments >>
                else
                  ./$file_name << parameters.arguments >>
                fi
                ;;
              msys*|linux*)
                ./$file_name << parameters.arguments >>
                ;;
              *)
                echo "Unsupported OS: $(uname)"
                exit 1
                ;;
            esac
          no_output_timeout: 1m

executors:
  test-server:
    docker:
      - image: cimg/python:<< parameters.python_version >>
      - image: us-central1-docker.pkg.dev/wandb-production/images/local-testcontainer:<< parameters.server_tag >>
        auth:
          username: _json_key
          password: $GCP_SERVICE_ACCOUNT_JSON_DECODED
        environment:
          CI: 1
          WANDB_ENABLE_TEST_CONTAINER: true
    parameters:
      python_version:
        description: "Python version"
        type: string
      server_tag:
        description: "Test server repository tag"
        type: string
        default: master
    resource_class: xlarge
  macos:
    macos:
      xcode: "14.2.0"
    resource_class: macos.m1.medium.gen1
  linux:
    docker:
      - image: cimg/base:stable
    resource_class: medium


jobs:
  system_tests:
    description: "Run tests against test server"
    parameters:
      python_version:
        description: "Python version"
        type: string
        default: << pipeline.parameters.python_version >>
      codecov_arguments:
        description: "Arguments to pass to codecov"
        type: string
        default: ""
    executor:
      name: test-server
      python_version: << parameters.python_version >>
    steps:
      - checkout
      - install_go
      - run:
          name: build and install wandb-core
          command: |
            pip install -U nox
            nox -s build-nexus install-nexus
      - run:
          name: run tests
          command: |
            mkdir -p test-results .coverage
            pip install -U pytest pytest-cov pytest-xdist
            # pytest -n=auto --cov=wandb --cov-report= --cov-report=xml --junitxml=test-results/junit.xml --no-cov-on-fail tests
            # go tool covdata textfmt -i=.coverage -o coverage.txt
      - store_test_results:
          path: test-results
      - codecov_upload:
          arguments: << parameters.codecov_arguments >>

  core-unit-test:
    parameters:
      os:
        type: executor
        default: linux
    executor: << parameters.os >>
    steps:
      - checkout
      - install_go
      - run:
          name: run go tests
          command: |
            go test -race -coverprofile=coverage.txt -covermode=atomic ./...
      - codecov_upload:
          arguments: -f coverage.txt
      - slack/notify:
          event: fail
          template: basic_fail_1
          mentions: "@channel"
          channel: $SLACK_SDK_NIGHTLY_CI_CHANNEL

workflows:
  all-tests:
    jobs:
      - system_tests:
          matrix:
            parameters:
              python_version: ["3.7", "3.8", "3.9", "3.10", "3.11", "3.12"]
      - core-unit-test:
          matrix:
            parameters:
              os: [linux, macos]
