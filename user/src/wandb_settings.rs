// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by protoc 23.4
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `wandb_settings.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_2_0;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:wandb_internal.ListStringValue)
pub struct ListStringValue {
    // message fields
    // @@protoc_insertion_point(field:wandb_internal.ListStringValue.value)
    pub value: ::std::vec::Vec<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:wandb_internal.ListStringValue.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ListStringValue {
    fn default() -> &'a ListStringValue {
        <ListStringValue as ::protobuf::Message>::default_instance()
    }
}

impl ListStringValue {
    pub fn new() -> ListStringValue {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "value",
            |m: &ListStringValue| { &m.value },
            |m: &mut ListStringValue| { &mut m.value },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ListStringValue>(
            "ListStringValue",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ListStringValue {
    const NAME: &'static str = "ListStringValue";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.value.push(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.value {
            my_size += ::protobuf::rt::string_size(1, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.value {
            os.write_string(1, &v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ListStringValue {
        ListStringValue::new()
    }

    fn clear(&mut self) {
        self.value.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ListStringValue {
        static instance: ListStringValue = ListStringValue {
            value: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ListStringValue {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ListStringValue").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ListStringValue {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ListStringValue {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:wandb_internal.MapStringKeyStringValue)
pub struct MapStringKeyStringValue {
    // message fields
    // @@protoc_insertion_point(field:wandb_internal.MapStringKeyStringValue.value)
    pub value: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:wandb_internal.MapStringKeyStringValue.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MapStringKeyStringValue {
    fn default() -> &'a MapStringKeyStringValue {
        <MapStringKeyStringValue as ::protobuf::Message>::default_instance()
    }
}

impl MapStringKeyStringValue {
    pub fn new() -> MapStringKeyStringValue {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_map_simpler_accessor::<_, _, _>(
            "value",
            |m: &MapStringKeyStringValue| { &m.value },
            |m: &mut MapStringKeyStringValue| { &mut m.value },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MapStringKeyStringValue>(
            "MapStringKeyStringValue",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MapStringKeyStringValue {
    const NAME: &'static str = "MapStringKeyStringValue";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    let len = is.read_raw_varint32()?;
                    let old_limit = is.push_limit(len as u64)?;
                    let mut key = ::std::default::Default::default();
                    let mut value = ::std::default::Default::default();
                    while let Some(tag) = is.read_raw_tag_or_eof()? {
                        match tag {
                            10 => key = is.read_string()?,
                            18 => value = is.read_string()?,
                            _ => ::protobuf::rt::skip_field_for_tag(tag, is)?,
                        };
                    }
                    is.pop_limit(old_limit);
                    self.value.insert(key, value);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for (k, v) in &self.value {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            entry_size += ::protobuf::rt::string_size(2, &v);
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(entry_size) + entry_size
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for (k, v) in &self.value {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            entry_size += ::protobuf::rt::string_size(2, &v);
            os.write_raw_varint32(10)?; // Tag.
            os.write_raw_varint32(entry_size as u32)?;
            os.write_string(1, &k)?;
            os.write_string(2, &v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MapStringKeyStringValue {
        MapStringKeyStringValue::new()
    }

    fn clear(&mut self) {
        self.value.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MapStringKeyStringValue {
        static instance: ::protobuf::rt::Lazy<MapStringKeyStringValue> = ::protobuf::rt::Lazy::new();
        instance.get(MapStringKeyStringValue::new)
    }
}

impl ::protobuf::MessageFull for MapStringKeyStringValue {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MapStringKeyStringValue").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MapStringKeyStringValue {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MapStringKeyStringValue {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:wandb_internal.MapStringKeyMapStringKeyStringValue)
pub struct MapStringKeyMapStringKeyStringValue {
    // message fields
    // @@protoc_insertion_point(field:wandb_internal.MapStringKeyMapStringKeyStringValue.value)
    pub value: ::std::collections::HashMap<::std::string::String, MapStringKeyStringValue>,
    // special fields
    // @@protoc_insertion_point(special_field:wandb_internal.MapStringKeyMapStringKeyStringValue.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MapStringKeyMapStringKeyStringValue {
    fn default() -> &'a MapStringKeyMapStringKeyStringValue {
        <MapStringKeyMapStringKeyStringValue as ::protobuf::Message>::default_instance()
    }
}

impl MapStringKeyMapStringKeyStringValue {
    pub fn new() -> MapStringKeyMapStringKeyStringValue {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_map_simpler_accessor::<_, _, _>(
            "value",
            |m: &MapStringKeyMapStringKeyStringValue| { &m.value },
            |m: &mut MapStringKeyMapStringKeyStringValue| { &mut m.value },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MapStringKeyMapStringKeyStringValue>(
            "MapStringKeyMapStringKeyStringValue",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MapStringKeyMapStringKeyStringValue {
    const NAME: &'static str = "MapStringKeyMapStringKeyStringValue";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    let len = is.read_raw_varint32()?;
                    let old_limit = is.push_limit(len as u64)?;
                    let mut key = ::std::default::Default::default();
                    let mut value = ::std::default::Default::default();
                    while let Some(tag) = is.read_raw_tag_or_eof()? {
                        match tag {
                            10 => key = is.read_string()?,
                            18 => value = is.read_message()?,
                            _ => ::protobuf::rt::skip_field_for_tag(tag, is)?,
                        };
                    }
                    is.pop_limit(old_limit);
                    self.value.insert(key, value);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for (k, v) in &self.value {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            let len = v.compute_size();
            entry_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(entry_size) + entry_size
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for (k, v) in &self.value {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            let len = v.cached_size() as u64;
            entry_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            os.write_raw_varint32(10)?; // Tag.
            os.write_raw_varint32(entry_size as u32)?;
            os.write_string(1, &k)?;
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MapStringKeyMapStringKeyStringValue {
        MapStringKeyMapStringKeyStringValue::new()
    }

    fn clear(&mut self) {
        self.value.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MapStringKeyMapStringKeyStringValue {
        static instance: ::protobuf::rt::Lazy<MapStringKeyMapStringKeyStringValue> = ::protobuf::rt::Lazy::new();
        instance.get(MapStringKeyMapStringKeyStringValue::new)
    }
}

impl ::protobuf::MessageFull for MapStringKeyMapStringKeyStringValue {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MapStringKeyMapStringKeyStringValue").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MapStringKeyMapStringKeyStringValue {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MapStringKeyMapStringKeyStringValue {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:wandb_internal.OpenMetricsFilters)
pub struct OpenMetricsFilters {
    // message oneof groups
    pub value: ::std::option::Option<open_metrics_filters::Value>,
    // special fields
    // @@protoc_insertion_point(special_field:wandb_internal.OpenMetricsFilters.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a OpenMetricsFilters {
    fn default() -> &'a OpenMetricsFilters {
        <OpenMetricsFilters as ::protobuf::Message>::default_instance()
    }
}

impl OpenMetricsFilters {
    pub fn new() -> OpenMetricsFilters {
        ::std::default::Default::default()
    }

    // .wandb_internal.ListStringValue sequence = 1;

    pub fn sequence(&self) -> &ListStringValue {
        match self.value {
            ::std::option::Option::Some(open_metrics_filters::Value::Sequence(ref v)) => v,
            _ => <ListStringValue as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_sequence(&mut self) {
        self.value = ::std::option::Option::None;
    }

    pub fn has_sequence(&self) -> bool {
        match self.value {
            ::std::option::Option::Some(open_metrics_filters::Value::Sequence(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_sequence(&mut self, v: ListStringValue) {
        self.value = ::std::option::Option::Some(open_metrics_filters::Value::Sequence(v))
    }

    // Mutable pointer to the field.
    pub fn mut_sequence(&mut self) -> &mut ListStringValue {
        if let ::std::option::Option::Some(open_metrics_filters::Value::Sequence(_)) = self.value {
        } else {
            self.value = ::std::option::Option::Some(open_metrics_filters::Value::Sequence(ListStringValue::new()));
        }
        match self.value {
            ::std::option::Option::Some(open_metrics_filters::Value::Sequence(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_sequence(&mut self) -> ListStringValue {
        if self.has_sequence() {
            match self.value.take() {
                ::std::option::Option::Some(open_metrics_filters::Value::Sequence(v)) => v,
                _ => panic!(),
            }
        } else {
            ListStringValue::new()
        }
    }

    // .wandb_internal.MapStringKeyMapStringKeyStringValue mapping = 2;

    pub fn mapping(&self) -> &MapStringKeyMapStringKeyStringValue {
        match self.value {
            ::std::option::Option::Some(open_metrics_filters::Value::Mapping(ref v)) => v,
            _ => <MapStringKeyMapStringKeyStringValue as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_mapping(&mut self) {
        self.value = ::std::option::Option::None;
    }

    pub fn has_mapping(&self) -> bool {
        match self.value {
            ::std::option::Option::Some(open_metrics_filters::Value::Mapping(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_mapping(&mut self, v: MapStringKeyMapStringKeyStringValue) {
        self.value = ::std::option::Option::Some(open_metrics_filters::Value::Mapping(v))
    }

    // Mutable pointer to the field.
    pub fn mut_mapping(&mut self) -> &mut MapStringKeyMapStringKeyStringValue {
        if let ::std::option::Option::Some(open_metrics_filters::Value::Mapping(_)) = self.value {
        } else {
            self.value = ::std::option::Option::Some(open_metrics_filters::Value::Mapping(MapStringKeyMapStringKeyStringValue::new()));
        }
        match self.value {
            ::std::option::Option::Some(open_metrics_filters::Value::Mapping(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_mapping(&mut self) -> MapStringKeyMapStringKeyStringValue {
        if self.has_mapping() {
            match self.value.take() {
                ::std::option::Option::Some(open_metrics_filters::Value::Mapping(v)) => v,
                _ => panic!(),
            }
        } else {
            MapStringKeyMapStringKeyStringValue::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, ListStringValue>(
            "sequence",
            OpenMetricsFilters::has_sequence,
            OpenMetricsFilters::sequence,
            OpenMetricsFilters::mut_sequence,
            OpenMetricsFilters::set_sequence,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, MapStringKeyMapStringKeyStringValue>(
            "mapping",
            OpenMetricsFilters::has_mapping,
            OpenMetricsFilters::mapping,
            OpenMetricsFilters::mut_mapping,
            OpenMetricsFilters::set_mapping,
        ));
        oneofs.push(open_metrics_filters::Value::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<OpenMetricsFilters>(
            "OpenMetricsFilters",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for OpenMetricsFilters {
    const NAME: &'static str = "OpenMetricsFilters";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.value = ::std::option::Option::Some(open_metrics_filters::Value::Sequence(is.read_message()?));
                },
                18 => {
                    self.value = ::std::option::Option::Some(open_metrics_filters::Value::Mapping(is.read_message()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.value {
            match v {
                &open_metrics_filters::Value::Sequence(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &open_metrics_filters::Value::Mapping(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let ::std::option::Option::Some(ref v) = self.value {
            match v {
                &open_metrics_filters::Value::Sequence(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
                },
                &open_metrics_filters::Value::Mapping(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> OpenMetricsFilters {
        OpenMetricsFilters::new()
    }

    fn clear(&mut self) {
        self.value = ::std::option::Option::None;
        self.value = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static OpenMetricsFilters {
        static instance: OpenMetricsFilters = OpenMetricsFilters {
            value: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for OpenMetricsFilters {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("OpenMetricsFilters").unwrap()).clone()
    }
}

impl ::std::fmt::Display for OpenMetricsFilters {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for OpenMetricsFilters {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `OpenMetricsFilters`
pub mod open_metrics_filters {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:wandb_internal.OpenMetricsFilters.value)
    pub enum Value {
        // @@protoc_insertion_point(oneof_field:wandb_internal.OpenMetricsFilters.sequence)
        Sequence(super::ListStringValue),
        // @@protoc_insertion_point(oneof_field:wandb_internal.OpenMetricsFilters.mapping)
        Mapping(super::MapStringKeyMapStringKeyStringValue),
    }

    impl ::protobuf::Oneof for Value {
    }

    impl ::protobuf::OneofFull for Value {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::OpenMetricsFilters as ::protobuf::MessageFull>::descriptor().oneof_by_name("value").unwrap()).clone()
        }
    }

    impl Value {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Value>("value")
        }
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:wandb_internal.Settings)
pub struct Settings {
    // message fields
    // @@protoc_insertion_point(field:wandb_internal.Settings._args)
    pub _args: ::protobuf::MessageField<ListStringValue>,
    // @@protoc_insertion_point(field:wandb_internal.Settings._aws_lambda)
    pub _aws_lambda: ::protobuf::MessageField<::protobuf::well_known_types::wrappers::BoolValue>,
    // @@protoc_insertion_point(field:wandb_internal.Settings._async_upload_concurrency_limit)
    pub _async_upload_concurrency_limit: ::protobuf::MessageField<::protobuf::well_known_types::wrappers::Int32Value>,
    // @@protoc_insertion_point(field:wandb_internal.Settings._cli_only_mode)
    pub _cli_only_mode: ::protobuf::MessageField<::protobuf::well_known_types::wrappers::BoolValue>,
    // @@protoc_insertion_point(field:wandb_internal.Settings._colab)
    pub _colab: ::protobuf::MessageField<::protobuf::well_known_types::wrappers::BoolValue>,
    // @@protoc_insertion_point(field:wandb_internal.Settings._cuda)
    pub _cuda: ::protobuf::MessageField<::protobuf::well_known_types::wrappers::StringValue>,
    // @@protoc_insertion_point(field:wandb_internal.Settings._disable_meta)
    pub _disable_meta: ::protobuf::MessageField<::protobuf::well_known_types::wrappers::BoolValue>,
    // @@protoc_insertion_point(field:wandb_internal.Settings._disable_service)
    pub _disable_service: ::protobuf::MessageField<::protobuf::well_known_types::wrappers::BoolValue>,
    // @@protoc_insertion_point(field:wandb_internal.Settings._disable_setproctitle)
    pub _disable_setproctitle: ::protobuf::MessageField<::protobuf::well_known_types::wrappers::BoolValue>,
    // @@protoc_insertion_point(field:wandb_internal.Settings._disable_stats)
    pub _disable_stats: ::protobuf::MessageField<::protobuf::well_known_types::wrappers::BoolValue>,
    // @@protoc_insertion_point(field:wandb_internal.Settings._disable_viewer)
    pub _disable_viewer: ::protobuf::MessageField<::protobuf::well_known_types::wrappers::BoolValue>,
    // @@protoc_insertion_point(field:wandb_internal.Settings._except_exit)
    pub _except_exit: ::protobuf::MessageField<::protobuf::well_known_types::wrappers::BoolValue>,
    // @@protoc_insertion_point(field:wandb_internal.Settings._executable)
    pub _executable: ::protobuf::MessageField<::protobuf::well_known_types::wrappers::StringValue>,
    // @@protoc_insertion_point(field:wandb_internal.Settings._extra_http_headers)
    pub _extra_http_headers: ::protobuf::MessageField<MapStringKeyStringValue>,
    // @@protoc_insertion_point(field:wandb_internal.Settings._file_stream_timeout_seconds)
    pub _file_stream_timeout_seconds: ::protobuf::MessageField<::protobuf::well_known_types::wrappers::DoubleValue>,
    // @@protoc_insertion_point(field:wandb_internal.Settings._flow_control_custom)
    pub _flow_control_custom: ::protobuf::MessageField<::protobuf::well_known_types::wrappers::BoolValue>,
    // @@protoc_insertion_point(field:wandb_internal.Settings._flow_control_disabled)
    pub _flow_control_disabled: ::protobuf::MessageField<::protobuf::well_known_types::wrappers::BoolValue>,
    // @@protoc_insertion_point(field:wandb_internal.Settings._internal_check_process)
    pub _internal_check_process: ::protobuf::MessageField<::protobuf::well_known_types::wrappers::DoubleValue>,
    // @@protoc_insertion_point(field:wandb_internal.Settings._internal_queue_timeout)
    pub _internal_queue_timeout: ::protobuf::MessageField<::protobuf::well_known_types::wrappers::DoubleValue>,
    // @@protoc_insertion_point(field:wandb_internal.Settings._ipython)
    pub _ipython: ::protobuf::MessageField<::protobuf::well_known_types::wrappers::BoolValue>,
    // @@protoc_insertion_point(field:wandb_internal.Settings._jupyter)
    pub _jupyter: ::protobuf::MessageField<::protobuf::well_known_types::wrappers::BoolValue>,
    // @@protoc_insertion_point(field:wandb_internal.Settings._jupyter_name)
    pub _jupyter_name: ::protobuf::MessageField<::protobuf::well_known_types::wrappers::StringValue>,
    // @@protoc_insertion_point(field:wandb_internal.Settings._jupyter_path)
    pub _jupyter_path: ::protobuf::MessageField<::protobuf::well_known_types::wrappers::StringValue>,
    // @@protoc_insertion_point(field:wandb_internal.Settings._jupyter_root)
    pub _jupyter_root: ::protobuf::MessageField<::protobuf::well_known_types::wrappers::StringValue>,
    // @@protoc_insertion_point(field:wandb_internal.Settings._kaggle)
    pub _kaggle: ::protobuf::MessageField<::protobuf::well_known_types::wrappers::BoolValue>,
    // @@protoc_insertion_point(field:wandb_internal.Settings._live_policy_rate_limit)
    pub _live_policy_rate_limit: ::protobuf::MessageField<::protobuf::well_known_types::wrappers::Int32Value>,
    // @@protoc_insertion_point(field:wandb_internal.Settings._live_policy_wait_time)
    pub _live_policy_wait_time: ::protobuf::MessageField<::protobuf::well_known_types::wrappers::Int32Value>,
    // @@protoc_insertion_point(field:wandb_internal.Settings._log_level)
    pub _log_level: ::protobuf::MessageField<::protobuf::well_known_types::wrappers::Int32Value>,
    // @@protoc_insertion_point(field:wandb_internal.Settings._network_buffer)
    pub _network_buffer: ::protobuf::MessageField<::protobuf::well_known_types::wrappers::Int32Value>,
    // @@protoc_insertion_point(field:wandb_internal.Settings._noop)
    pub _noop: ::protobuf::MessageField<::protobuf::well_known_types::wrappers::BoolValue>,
    // @@protoc_insertion_point(field:wandb_internal.Settings._notebook)
    pub _notebook: ::protobuf::MessageField<::protobuf::well_known_types::wrappers::BoolValue>,
    // @@protoc_insertion_point(field:wandb_internal.Settings._offline)
    pub _offline: ::protobuf::MessageField<::protobuf::well_known_types::wrappers::BoolValue>,
    // @@protoc_insertion_point(field:wandb_internal.Settings._sync)
    pub _sync: ::protobuf::MessageField<::protobuf::well_known_types::wrappers::BoolValue>,
    // @@protoc_insertion_point(field:wandb_internal.Settings._os)
    pub _os: ::protobuf::MessageField<::protobuf::well_known_types::wrappers::StringValue>,
    // @@protoc_insertion_point(field:wandb_internal.Settings._platform)
    pub _platform: ::protobuf::MessageField<::protobuf::well_known_types::wrappers::StringValue>,
    // @@protoc_insertion_point(field:wandb_internal.Settings._python)
    pub _python: ::protobuf::MessageField<::protobuf::well_known_types::wrappers::StringValue>,
    // @@protoc_insertion_point(field:wandb_internal.Settings._runqueue_item_id)
    pub _runqueue_item_id: ::protobuf::MessageField<::protobuf::well_known_types::wrappers::StringValue>,
    // @@protoc_insertion_point(field:wandb_internal.Settings._require_nexus)
    pub _require_nexus: ::protobuf::MessageField<::protobuf::well_known_types::wrappers::BoolValue>,
    // @@protoc_insertion_point(field:wandb_internal.Settings._save_requirements)
    pub _save_requirements: ::protobuf::MessageField<::protobuf::well_known_types::wrappers::BoolValue>,
    // @@protoc_insertion_point(field:wandb_internal.Settings._service_transport)
    pub _service_transport: ::protobuf::MessageField<::protobuf::well_known_types::wrappers::StringValue>,
    // @@protoc_insertion_point(field:wandb_internal.Settings._service_wait)
    pub _service_wait: ::protobuf::MessageField<::protobuf::well_known_types::wrappers::DoubleValue>,
    // @@protoc_insertion_point(field:wandb_internal.Settings._start_datetime)
    pub _start_datetime: ::protobuf::MessageField<::protobuf::well_known_types::wrappers::StringValue>,
    // @@protoc_insertion_point(field:wandb_internal.Settings._start_time)
    pub _start_time: ::protobuf::MessageField<::protobuf::well_known_types::wrappers::DoubleValue>,
    // @@protoc_insertion_point(field:wandb_internal.Settings._stats_pid)
    pub _stats_pid: ::protobuf::MessageField<::protobuf::well_known_types::wrappers::Int32Value>,
    // @@protoc_insertion_point(field:wandb_internal.Settings._stats_sample_rate_seconds)
    pub _stats_sample_rate_seconds: ::protobuf::MessageField<::protobuf::well_known_types::wrappers::DoubleValue>,
    // @@protoc_insertion_point(field:wandb_internal.Settings._stats_samples_to_average)
    pub _stats_samples_to_average: ::protobuf::MessageField<::protobuf::well_known_types::wrappers::Int32Value>,
    // @@protoc_insertion_point(field:wandb_internal.Settings._stats_join_assets)
    pub _stats_join_assets: ::protobuf::MessageField<::protobuf::well_known_types::wrappers::BoolValue>,
    // @@protoc_insertion_point(field:wandb_internal.Settings._stats_neuron_monitor_config_path)
    pub _stats_neuron_monitor_config_path: ::protobuf::MessageField<::protobuf::well_known_types::wrappers::StringValue>,
    // @@protoc_insertion_point(field:wandb_internal.Settings._stats_open_metrics_endpoints)
    pub _stats_open_metrics_endpoints: ::protobuf::MessageField<MapStringKeyStringValue>,
    // @@protoc_insertion_point(field:wandb_internal.Settings._stats_open_metrics_filters)
    pub _stats_open_metrics_filters: ::protobuf::MessageField<OpenMetricsFilters>,
    // @@protoc_insertion_point(field:wandb_internal.Settings._tmp_code_dir)
    pub _tmp_code_dir: ::protobuf::MessageField<::protobuf::well_known_types::wrappers::StringValue>,
    // @@protoc_insertion_point(field:wandb_internal.Settings._tracelog)
    pub _tracelog: ::protobuf::MessageField<::protobuf::well_known_types::wrappers::StringValue>,
    // @@protoc_insertion_point(field:wandb_internal.Settings._unsaved_keys)
    pub _unsaved_keys: ::protobuf::MessageField<ListStringValue>,
    // @@protoc_insertion_point(field:wandb_internal.Settings._windows)
    pub _windows: ::protobuf::MessageField<::protobuf::well_known_types::wrappers::BoolValue>,
    // @@protoc_insertion_point(field:wandb_internal.Settings.allow_val_change)
    pub allow_val_change: ::protobuf::MessageField<::protobuf::well_known_types::wrappers::BoolValue>,
    // @@protoc_insertion_point(field:wandb_internal.Settings.anonymous)
    pub anonymous: ::protobuf::MessageField<::protobuf::well_known_types::wrappers::StringValue>,
    // @@protoc_insertion_point(field:wandb_internal.Settings.api_key)
    pub api_key: ::protobuf::MessageField<::protobuf::well_known_types::wrappers::StringValue>,
    // @@protoc_insertion_point(field:wandb_internal.Settings.azure_account_url_to_access_key)
    pub azure_account_url_to_access_key: ::protobuf::MessageField<MapStringKeyStringValue>,
    // @@protoc_insertion_point(field:wandb_internal.Settings.base_url)
    pub base_url: ::protobuf::MessageField<::protobuf::well_known_types::wrappers::StringValue>,
    // @@protoc_insertion_point(field:wandb_internal.Settings.code_dir)
    pub code_dir: ::protobuf::MessageField<::protobuf::well_known_types::wrappers::StringValue>,
    // @@protoc_insertion_point(field:wandb_internal.Settings.config_paths)
    pub config_paths: ::protobuf::MessageField<ListStringValue>,
    // @@protoc_insertion_point(field:wandb_internal.Settings.console)
    pub console: ::protobuf::MessageField<::protobuf::well_known_types::wrappers::StringValue>,
    // @@protoc_insertion_point(field:wandb_internal.Settings.deployment)
    pub deployment: ::protobuf::MessageField<::protobuf::well_known_types::wrappers::StringValue>,
    // @@protoc_insertion_point(field:wandb_internal.Settings.disable_code)
    pub disable_code: ::protobuf::MessageField<::protobuf::well_known_types::wrappers::BoolValue>,
    // @@protoc_insertion_point(field:wandb_internal.Settings.disable_git)
    pub disable_git: ::protobuf::MessageField<::protobuf::well_known_types::wrappers::BoolValue>,
    // @@protoc_insertion_point(field:wandb_internal.Settings.disable_hints)
    pub disable_hints: ::protobuf::MessageField<::protobuf::well_known_types::wrappers::BoolValue>,
    // @@protoc_insertion_point(field:wandb_internal.Settings.disable_job_creation)
    pub disable_job_creation: ::protobuf::MessageField<::protobuf::well_known_types::wrappers::BoolValue>,
    // @@protoc_insertion_point(field:wandb_internal.Settings.disabled)
    pub disabled: ::protobuf::MessageField<::protobuf::well_known_types::wrappers::BoolValue>,
    // @@protoc_insertion_point(field:wandb_internal.Settings.docker)
    pub docker: ::protobuf::MessageField<::protobuf::well_known_types::wrappers::StringValue>,
    // @@protoc_insertion_point(field:wandb_internal.Settings.email)
    pub email: ::protobuf::MessageField<::protobuf::well_known_types::wrappers::StringValue>,
    // @@protoc_insertion_point(field:wandb_internal.Settings.entity)
    pub entity: ::protobuf::MessageField<::protobuf::well_known_types::wrappers::StringValue>,
    // @@protoc_insertion_point(field:wandb_internal.Settings.files_dir)
    pub files_dir: ::protobuf::MessageField<::protobuf::well_known_types::wrappers::StringValue>,
    // @@protoc_insertion_point(field:wandb_internal.Settings.force)
    pub force: ::protobuf::MessageField<::protobuf::well_known_types::wrappers::BoolValue>,
    // @@protoc_insertion_point(field:wandb_internal.Settings.git_commit)
    pub git_commit: ::protobuf::MessageField<::protobuf::well_known_types::wrappers::StringValue>,
    // @@protoc_insertion_point(field:wandb_internal.Settings.git_remote)
    pub git_remote: ::protobuf::MessageField<::protobuf::well_known_types::wrappers::StringValue>,
    // @@protoc_insertion_point(field:wandb_internal.Settings.git_remote_url)
    pub git_remote_url: ::protobuf::MessageField<::protobuf::well_known_types::wrappers::StringValue>,
    // @@protoc_insertion_point(field:wandb_internal.Settings.git_root)
    pub git_root: ::protobuf::MessageField<::protobuf::well_known_types::wrappers::StringValue>,
    // @@protoc_insertion_point(field:wandb_internal.Settings.heartbeat_seconds)
    pub heartbeat_seconds: ::protobuf::MessageField<::protobuf::well_known_types::wrappers::Int32Value>,
    // @@protoc_insertion_point(field:wandb_internal.Settings.host)
    pub host: ::protobuf::MessageField<::protobuf::well_known_types::wrappers::StringValue>,
    // @@protoc_insertion_point(field:wandb_internal.Settings.ignore_globs)
    pub ignore_globs: ::protobuf::MessageField<ListStringValue>,
    // @@protoc_insertion_point(field:wandb_internal.Settings.init_timeout)
    pub init_timeout: ::protobuf::MessageField<::protobuf::well_known_types::wrappers::DoubleValue>,
    // @@protoc_insertion_point(field:wandb_internal.Settings.is_local)
    pub is_local: ::protobuf::MessageField<::protobuf::well_known_types::wrappers::BoolValue>,
    // @@protoc_insertion_point(field:wandb_internal.Settings.job_name)
    pub job_name: ::protobuf::MessageField<::protobuf::well_known_types::wrappers::StringValue>,
    // @@protoc_insertion_point(field:wandb_internal.Settings.job_source)
    pub job_source: ::protobuf::MessageField<::protobuf::well_known_types::wrappers::StringValue>,
    // @@protoc_insertion_point(field:wandb_internal.Settings.label_disable)
    pub label_disable: ::protobuf::MessageField<::protobuf::well_known_types::wrappers::BoolValue>,
    // @@protoc_insertion_point(field:wandb_internal.Settings.launch)
    pub launch: ::protobuf::MessageField<::protobuf::well_known_types::wrappers::BoolValue>,
    // @@protoc_insertion_point(field:wandb_internal.Settings.launch_config_path)
    pub launch_config_path: ::protobuf::MessageField<::protobuf::well_known_types::wrappers::StringValue>,
    // @@protoc_insertion_point(field:wandb_internal.Settings.log_dir)
    pub log_dir: ::protobuf::MessageField<::protobuf::well_known_types::wrappers::StringValue>,
    // @@protoc_insertion_point(field:wandb_internal.Settings.log_internal)
    pub log_internal: ::protobuf::MessageField<::protobuf::well_known_types::wrappers::StringValue>,
    // @@protoc_insertion_point(field:wandb_internal.Settings.log_symlink_internal)
    pub log_symlink_internal: ::protobuf::MessageField<::protobuf::well_known_types::wrappers::StringValue>,
    // @@protoc_insertion_point(field:wandb_internal.Settings.log_symlink_user)
    pub log_symlink_user: ::protobuf::MessageField<::protobuf::well_known_types::wrappers::StringValue>,
    // @@protoc_insertion_point(field:wandb_internal.Settings.log_user)
    pub log_user: ::protobuf::MessageField<::protobuf::well_known_types::wrappers::StringValue>,
    // @@protoc_insertion_point(field:wandb_internal.Settings.login_timeout)
    pub login_timeout: ::protobuf::MessageField<::protobuf::well_known_types::wrappers::DoubleValue>,
    // @@protoc_insertion_point(field:wandb_internal.Settings.mode)
    pub mode: ::protobuf::MessageField<::protobuf::well_known_types::wrappers::StringValue>,
    // @@protoc_insertion_point(field:wandb_internal.Settings.notebook_name)
    pub notebook_name: ::protobuf::MessageField<::protobuf::well_known_types::wrappers::StringValue>,
    // @@protoc_insertion_point(field:wandb_internal.Settings.problem)
    pub problem: ::protobuf::MessageField<::protobuf::well_known_types::wrappers::StringValue>,
    // @@protoc_insertion_point(field:wandb_internal.Settings.program)
    pub program: ::protobuf::MessageField<::protobuf::well_known_types::wrappers::StringValue>,
    // @@protoc_insertion_point(field:wandb_internal.Settings.program_relpath)
    pub program_relpath: ::protobuf::MessageField<::protobuf::well_known_types::wrappers::StringValue>,
    // @@protoc_insertion_point(field:wandb_internal.Settings.project)
    pub project: ::protobuf::MessageField<::protobuf::well_known_types::wrappers::StringValue>,
    // @@protoc_insertion_point(field:wandb_internal.Settings.project_url)
    pub project_url: ::protobuf::MessageField<::protobuf::well_known_types::wrappers::StringValue>,
    // @@protoc_insertion_point(field:wandb_internal.Settings.quiet)
    pub quiet: ::protobuf::MessageField<::protobuf::well_known_types::wrappers::BoolValue>,
    // @@protoc_insertion_point(field:wandb_internal.Settings.reinit)
    pub reinit: ::protobuf::MessageField<::protobuf::well_known_types::wrappers::BoolValue>,
    // @@protoc_insertion_point(field:wandb_internal.Settings.relogin)
    pub relogin: ::protobuf::MessageField<::protobuf::well_known_types::wrappers::BoolValue>,
    // @@protoc_insertion_point(field:wandb_internal.Settings.resume)
    pub resume: ::protobuf::MessageField<::protobuf::well_known_types::wrappers::StringValue>,
    // @@protoc_insertion_point(field:wandb_internal.Settings.resume_fname)
    pub resume_fname: ::protobuf::MessageField<::protobuf::well_known_types::wrappers::StringValue>,
    // @@protoc_insertion_point(field:wandb_internal.Settings.resumed)
    pub resumed: ::protobuf::MessageField<::protobuf::well_known_types::wrappers::BoolValue>,
    // @@protoc_insertion_point(field:wandb_internal.Settings.root_dir)
    pub root_dir: ::protobuf::MessageField<::protobuf::well_known_types::wrappers::StringValue>,
    // @@protoc_insertion_point(field:wandb_internal.Settings.run_group)
    pub run_group: ::protobuf::MessageField<::protobuf::well_known_types::wrappers::StringValue>,
    // @@protoc_insertion_point(field:wandb_internal.Settings.run_id)
    pub run_id: ::protobuf::MessageField<::protobuf::well_known_types::wrappers::StringValue>,
    // @@protoc_insertion_point(field:wandb_internal.Settings.run_job_type)
    pub run_job_type: ::protobuf::MessageField<::protobuf::well_known_types::wrappers::StringValue>,
    // @@protoc_insertion_point(field:wandb_internal.Settings.run_mode)
    pub run_mode: ::protobuf::MessageField<::protobuf::well_known_types::wrappers::StringValue>,
    // @@protoc_insertion_point(field:wandb_internal.Settings.run_name)
    pub run_name: ::protobuf::MessageField<::protobuf::well_known_types::wrappers::StringValue>,
    // @@protoc_insertion_point(field:wandb_internal.Settings.run_notes)
    pub run_notes: ::protobuf::MessageField<::protobuf::well_known_types::wrappers::StringValue>,
    // @@protoc_insertion_point(field:wandb_internal.Settings.run_tags)
    pub run_tags: ::protobuf::MessageField<ListStringValue>,
    // @@protoc_insertion_point(field:wandb_internal.Settings.run_url)
    pub run_url: ::protobuf::MessageField<::protobuf::well_known_types::wrappers::StringValue>,
    // @@protoc_insertion_point(field:wandb_internal.Settings.sagemaker_disable)
    pub sagemaker_disable: ::protobuf::MessageField<::protobuf::well_known_types::wrappers::BoolValue>,
    // @@protoc_insertion_point(field:wandb_internal.Settings.save_code)
    pub save_code: ::protobuf::MessageField<::protobuf::well_known_types::wrappers::BoolValue>,
    // @@protoc_insertion_point(field:wandb_internal.Settings.settings_system)
    pub settings_system: ::protobuf::MessageField<::protobuf::well_known_types::wrappers::StringValue>,
    // @@protoc_insertion_point(field:wandb_internal.Settings.settings_workspace)
    pub settings_workspace: ::protobuf::MessageField<::protobuf::well_known_types::wrappers::StringValue>,
    // @@protoc_insertion_point(field:wandb_internal.Settings.show_colors)
    pub show_colors: ::protobuf::MessageField<::protobuf::well_known_types::wrappers::BoolValue>,
    // @@protoc_insertion_point(field:wandb_internal.Settings.show_emoji)
    pub show_emoji: ::protobuf::MessageField<::protobuf::well_known_types::wrappers::BoolValue>,
    // @@protoc_insertion_point(field:wandb_internal.Settings.show_errors)
    pub show_errors: ::protobuf::MessageField<::protobuf::well_known_types::wrappers::BoolValue>,
    // @@protoc_insertion_point(field:wandb_internal.Settings.show_info)
    pub show_info: ::protobuf::MessageField<::protobuf::well_known_types::wrappers::BoolValue>,
    // @@protoc_insertion_point(field:wandb_internal.Settings.show_warnings)
    pub show_warnings: ::protobuf::MessageField<::protobuf::well_known_types::wrappers::BoolValue>,
    // @@protoc_insertion_point(field:wandb_internal.Settings.silent)
    pub silent: ::protobuf::MessageField<::protobuf::well_known_types::wrappers::BoolValue>,
    // @@protoc_insertion_point(field:wandb_internal.Settings.start_method)
    pub start_method: ::protobuf::MessageField<::protobuf::well_known_types::wrappers::StringValue>,
    // @@protoc_insertion_point(field:wandb_internal.Settings.strict)
    pub strict: ::protobuf::MessageField<::protobuf::well_known_types::wrappers::BoolValue>,
    // @@protoc_insertion_point(field:wandb_internal.Settings.summary_errors)
    pub summary_errors: ::protobuf::MessageField<::protobuf::well_known_types::wrappers::Int32Value>,
    // @@protoc_insertion_point(field:wandb_internal.Settings.summary_timeout)
    pub summary_timeout: ::protobuf::MessageField<::protobuf::well_known_types::wrappers::Int32Value>,
    // @@protoc_insertion_point(field:wandb_internal.Settings.summary_warnings)
    pub summary_warnings: ::protobuf::MessageField<::protobuf::well_known_types::wrappers::Int32Value>,
    // @@protoc_insertion_point(field:wandb_internal.Settings.sweep_id)
    pub sweep_id: ::protobuf::MessageField<::protobuf::well_known_types::wrappers::StringValue>,
    // @@protoc_insertion_point(field:wandb_internal.Settings.sweep_param_path)
    pub sweep_param_path: ::protobuf::MessageField<::protobuf::well_known_types::wrappers::StringValue>,
    // @@protoc_insertion_point(field:wandb_internal.Settings.sweep_url)
    pub sweep_url: ::protobuf::MessageField<::protobuf::well_known_types::wrappers::StringValue>,
    // @@protoc_insertion_point(field:wandb_internal.Settings.symlink)
    pub symlink: ::protobuf::MessageField<::protobuf::well_known_types::wrappers::BoolValue>,
    // @@protoc_insertion_point(field:wandb_internal.Settings.sync_dir)
    pub sync_dir: ::protobuf::MessageField<::protobuf::well_known_types::wrappers::StringValue>,
    // @@protoc_insertion_point(field:wandb_internal.Settings.sync_file)
    pub sync_file: ::protobuf::MessageField<::protobuf::well_known_types::wrappers::StringValue>,
    // @@protoc_insertion_point(field:wandb_internal.Settings.sync_symlink_latest)
    pub sync_symlink_latest: ::protobuf::MessageField<::protobuf::well_known_types::wrappers::StringValue>,
    // @@protoc_insertion_point(field:wandb_internal.Settings.system_sample)
    pub system_sample: ::protobuf::MessageField<::protobuf::well_known_types::wrappers::Int32Value>,
    // @@protoc_insertion_point(field:wandb_internal.Settings.system_sample_seconds)
    pub system_sample_seconds: ::protobuf::MessageField<::protobuf::well_known_types::wrappers::Int32Value>,
    // @@protoc_insertion_point(field:wandb_internal.Settings.table_raise_on_max_row_limit_exceeded)
    pub table_raise_on_max_row_limit_exceeded: ::protobuf::MessageField<::protobuf::well_known_types::wrappers::BoolValue>,
    // @@protoc_insertion_point(field:wandb_internal.Settings.timespec)
    pub timespec: ::protobuf::MessageField<::protobuf::well_known_types::wrappers::StringValue>,
    // @@protoc_insertion_point(field:wandb_internal.Settings.tmp_dir)
    pub tmp_dir: ::protobuf::MessageField<::protobuf::well_known_types::wrappers::StringValue>,
    // @@protoc_insertion_point(field:wandb_internal.Settings.username)
    pub username: ::protobuf::MessageField<::protobuf::well_known_types::wrappers::StringValue>,
    // @@protoc_insertion_point(field:wandb_internal.Settings.wandb_dir)
    pub wandb_dir: ::protobuf::MessageField<::protobuf::well_known_types::wrappers::StringValue>,
    // special fields
    // @@protoc_insertion_point(special_field:wandb_internal.Settings.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Settings {
    fn default() -> &'a Settings {
        <Settings as ::protobuf::Message>::default_instance()
    }
}

impl Settings {
    pub fn new() -> Settings {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(144);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ListStringValue>(
            "_args",
            |m: &Settings| { &m._args },
            |m: &mut Settings| { &mut m._args },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::wrappers::BoolValue>(
            "_aws_lambda",
            |m: &Settings| { &m._aws_lambda },
            |m: &mut Settings| { &mut m._aws_lambda },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::wrappers::Int32Value>(
            "_async_upload_concurrency_limit",
            |m: &Settings| { &m._async_upload_concurrency_limit },
            |m: &mut Settings| { &mut m._async_upload_concurrency_limit },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::wrappers::BoolValue>(
            "_cli_only_mode",
            |m: &Settings| { &m._cli_only_mode },
            |m: &mut Settings| { &mut m._cli_only_mode },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::wrappers::BoolValue>(
            "_colab",
            |m: &Settings| { &m._colab },
            |m: &mut Settings| { &mut m._colab },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::wrappers::StringValue>(
            "_cuda",
            |m: &Settings| { &m._cuda },
            |m: &mut Settings| { &mut m._cuda },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::wrappers::BoolValue>(
            "_disable_meta",
            |m: &Settings| { &m._disable_meta },
            |m: &mut Settings| { &mut m._disable_meta },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::wrappers::BoolValue>(
            "_disable_service",
            |m: &Settings| { &m._disable_service },
            |m: &mut Settings| { &mut m._disable_service },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::wrappers::BoolValue>(
            "_disable_setproctitle",
            |m: &Settings| { &m._disable_setproctitle },
            |m: &mut Settings| { &mut m._disable_setproctitle },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::wrappers::BoolValue>(
            "_disable_stats",
            |m: &Settings| { &m._disable_stats },
            |m: &mut Settings| { &mut m._disable_stats },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::wrappers::BoolValue>(
            "_disable_viewer",
            |m: &Settings| { &m._disable_viewer },
            |m: &mut Settings| { &mut m._disable_viewer },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::wrappers::BoolValue>(
            "_except_exit",
            |m: &Settings| { &m._except_exit },
            |m: &mut Settings| { &mut m._except_exit },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::wrappers::StringValue>(
            "_executable",
            |m: &Settings| { &m._executable },
            |m: &mut Settings| { &mut m._executable },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, MapStringKeyStringValue>(
            "_extra_http_headers",
            |m: &Settings| { &m._extra_http_headers },
            |m: &mut Settings| { &mut m._extra_http_headers },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::wrappers::DoubleValue>(
            "_file_stream_timeout_seconds",
            |m: &Settings| { &m._file_stream_timeout_seconds },
            |m: &mut Settings| { &mut m._file_stream_timeout_seconds },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::wrappers::BoolValue>(
            "_flow_control_custom",
            |m: &Settings| { &m._flow_control_custom },
            |m: &mut Settings| { &mut m._flow_control_custom },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::wrappers::BoolValue>(
            "_flow_control_disabled",
            |m: &Settings| { &m._flow_control_disabled },
            |m: &mut Settings| { &mut m._flow_control_disabled },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::wrappers::DoubleValue>(
            "_internal_check_process",
            |m: &Settings| { &m._internal_check_process },
            |m: &mut Settings| { &mut m._internal_check_process },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::wrappers::DoubleValue>(
            "_internal_queue_timeout",
            |m: &Settings| { &m._internal_queue_timeout },
            |m: &mut Settings| { &mut m._internal_queue_timeout },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::wrappers::BoolValue>(
            "_ipython",
            |m: &Settings| { &m._ipython },
            |m: &mut Settings| { &mut m._ipython },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::wrappers::BoolValue>(
            "_jupyter",
            |m: &Settings| { &m._jupyter },
            |m: &mut Settings| { &mut m._jupyter },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::wrappers::StringValue>(
            "_jupyter_name",
            |m: &Settings| { &m._jupyter_name },
            |m: &mut Settings| { &mut m._jupyter_name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::wrappers::StringValue>(
            "_jupyter_path",
            |m: &Settings| { &m._jupyter_path },
            |m: &mut Settings| { &mut m._jupyter_path },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::wrappers::StringValue>(
            "_jupyter_root",
            |m: &Settings| { &m._jupyter_root },
            |m: &mut Settings| { &mut m._jupyter_root },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::wrappers::BoolValue>(
            "_kaggle",
            |m: &Settings| { &m._kaggle },
            |m: &mut Settings| { &mut m._kaggle },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::wrappers::Int32Value>(
            "_live_policy_rate_limit",
            |m: &Settings| { &m._live_policy_rate_limit },
            |m: &mut Settings| { &mut m._live_policy_rate_limit },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::wrappers::Int32Value>(
            "_live_policy_wait_time",
            |m: &Settings| { &m._live_policy_wait_time },
            |m: &mut Settings| { &mut m._live_policy_wait_time },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::wrappers::Int32Value>(
            "_log_level",
            |m: &Settings| { &m._log_level },
            |m: &mut Settings| { &mut m._log_level },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::wrappers::Int32Value>(
            "_network_buffer",
            |m: &Settings| { &m._network_buffer },
            |m: &mut Settings| { &mut m._network_buffer },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::wrappers::BoolValue>(
            "_noop",
            |m: &Settings| { &m._noop },
            |m: &mut Settings| { &mut m._noop },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::wrappers::BoolValue>(
            "_notebook",
            |m: &Settings| { &m._notebook },
            |m: &mut Settings| { &mut m._notebook },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::wrappers::BoolValue>(
            "_offline",
            |m: &Settings| { &m._offline },
            |m: &mut Settings| { &mut m._offline },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::wrappers::BoolValue>(
            "_sync",
            |m: &Settings| { &m._sync },
            |m: &mut Settings| { &mut m._sync },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::wrappers::StringValue>(
            "_os",
            |m: &Settings| { &m._os },
            |m: &mut Settings| { &mut m._os },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::wrappers::StringValue>(
            "_platform",
            |m: &Settings| { &m._platform },
            |m: &mut Settings| { &mut m._platform },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::wrappers::StringValue>(
            "_python",
            |m: &Settings| { &m._python },
            |m: &mut Settings| { &mut m._python },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::wrappers::StringValue>(
            "_runqueue_item_id",
            |m: &Settings| { &m._runqueue_item_id },
            |m: &mut Settings| { &mut m._runqueue_item_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::wrappers::BoolValue>(
            "_require_nexus",
            |m: &Settings| { &m._require_nexus },
            |m: &mut Settings| { &mut m._require_nexus },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::wrappers::BoolValue>(
            "_save_requirements",
            |m: &Settings| { &m._save_requirements },
            |m: &mut Settings| { &mut m._save_requirements },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::wrappers::StringValue>(
            "_service_transport",
            |m: &Settings| { &m._service_transport },
            |m: &mut Settings| { &mut m._service_transport },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::wrappers::DoubleValue>(
            "_service_wait",
            |m: &Settings| { &m._service_wait },
            |m: &mut Settings| { &mut m._service_wait },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::wrappers::StringValue>(
            "_start_datetime",
            |m: &Settings| { &m._start_datetime },
            |m: &mut Settings| { &mut m._start_datetime },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::wrappers::DoubleValue>(
            "_start_time",
            |m: &Settings| { &m._start_time },
            |m: &mut Settings| { &mut m._start_time },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::wrappers::Int32Value>(
            "_stats_pid",
            |m: &Settings| { &m._stats_pid },
            |m: &mut Settings| { &mut m._stats_pid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::wrappers::DoubleValue>(
            "_stats_sample_rate_seconds",
            |m: &Settings| { &m._stats_sample_rate_seconds },
            |m: &mut Settings| { &mut m._stats_sample_rate_seconds },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::wrappers::Int32Value>(
            "_stats_samples_to_average",
            |m: &Settings| { &m._stats_samples_to_average },
            |m: &mut Settings| { &mut m._stats_samples_to_average },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::wrappers::BoolValue>(
            "_stats_join_assets",
            |m: &Settings| { &m._stats_join_assets },
            |m: &mut Settings| { &mut m._stats_join_assets },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::wrappers::StringValue>(
            "_stats_neuron_monitor_config_path",
            |m: &Settings| { &m._stats_neuron_monitor_config_path },
            |m: &mut Settings| { &mut m._stats_neuron_monitor_config_path },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, MapStringKeyStringValue>(
            "_stats_open_metrics_endpoints",
            |m: &Settings| { &m._stats_open_metrics_endpoints },
            |m: &mut Settings| { &mut m._stats_open_metrics_endpoints },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, OpenMetricsFilters>(
            "_stats_open_metrics_filters",
            |m: &Settings| { &m._stats_open_metrics_filters },
            |m: &mut Settings| { &mut m._stats_open_metrics_filters },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::wrappers::StringValue>(
            "_tmp_code_dir",
            |m: &Settings| { &m._tmp_code_dir },
            |m: &mut Settings| { &mut m._tmp_code_dir },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::wrappers::StringValue>(
            "_tracelog",
            |m: &Settings| { &m._tracelog },
            |m: &mut Settings| { &mut m._tracelog },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ListStringValue>(
            "_unsaved_keys",
            |m: &Settings| { &m._unsaved_keys },
            |m: &mut Settings| { &mut m._unsaved_keys },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::wrappers::BoolValue>(
            "_windows",
            |m: &Settings| { &m._windows },
            |m: &mut Settings| { &mut m._windows },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::wrappers::BoolValue>(
            "allow_val_change",
            |m: &Settings| { &m.allow_val_change },
            |m: &mut Settings| { &mut m.allow_val_change },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::wrappers::StringValue>(
            "anonymous",
            |m: &Settings| { &m.anonymous },
            |m: &mut Settings| { &mut m.anonymous },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::wrappers::StringValue>(
            "api_key",
            |m: &Settings| { &m.api_key },
            |m: &mut Settings| { &mut m.api_key },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, MapStringKeyStringValue>(
            "azure_account_url_to_access_key",
            |m: &Settings| { &m.azure_account_url_to_access_key },
            |m: &mut Settings| { &mut m.azure_account_url_to_access_key },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::wrappers::StringValue>(
            "base_url",
            |m: &Settings| { &m.base_url },
            |m: &mut Settings| { &mut m.base_url },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::wrappers::StringValue>(
            "code_dir",
            |m: &Settings| { &m.code_dir },
            |m: &mut Settings| { &mut m.code_dir },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ListStringValue>(
            "config_paths",
            |m: &Settings| { &m.config_paths },
            |m: &mut Settings| { &mut m.config_paths },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::wrappers::StringValue>(
            "console",
            |m: &Settings| { &m.console },
            |m: &mut Settings| { &mut m.console },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::wrappers::StringValue>(
            "deployment",
            |m: &Settings| { &m.deployment },
            |m: &mut Settings| { &mut m.deployment },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::wrappers::BoolValue>(
            "disable_code",
            |m: &Settings| { &m.disable_code },
            |m: &mut Settings| { &mut m.disable_code },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::wrappers::BoolValue>(
            "disable_git",
            |m: &Settings| { &m.disable_git },
            |m: &mut Settings| { &mut m.disable_git },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::wrappers::BoolValue>(
            "disable_hints",
            |m: &Settings| { &m.disable_hints },
            |m: &mut Settings| { &mut m.disable_hints },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::wrappers::BoolValue>(
            "disable_job_creation",
            |m: &Settings| { &m.disable_job_creation },
            |m: &mut Settings| { &mut m.disable_job_creation },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::wrappers::BoolValue>(
            "disabled",
            |m: &Settings| { &m.disabled },
            |m: &mut Settings| { &mut m.disabled },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::wrappers::StringValue>(
            "docker",
            |m: &Settings| { &m.docker },
            |m: &mut Settings| { &mut m.docker },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::wrappers::StringValue>(
            "email",
            |m: &Settings| { &m.email },
            |m: &mut Settings| { &mut m.email },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::wrappers::StringValue>(
            "entity",
            |m: &Settings| { &m.entity },
            |m: &mut Settings| { &mut m.entity },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::wrappers::StringValue>(
            "files_dir",
            |m: &Settings| { &m.files_dir },
            |m: &mut Settings| { &mut m.files_dir },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::wrappers::BoolValue>(
            "force",
            |m: &Settings| { &m.force },
            |m: &mut Settings| { &mut m.force },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::wrappers::StringValue>(
            "git_commit",
            |m: &Settings| { &m.git_commit },
            |m: &mut Settings| { &mut m.git_commit },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::wrappers::StringValue>(
            "git_remote",
            |m: &Settings| { &m.git_remote },
            |m: &mut Settings| { &mut m.git_remote },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::wrappers::StringValue>(
            "git_remote_url",
            |m: &Settings| { &m.git_remote_url },
            |m: &mut Settings| { &mut m.git_remote_url },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::wrappers::StringValue>(
            "git_root",
            |m: &Settings| { &m.git_root },
            |m: &mut Settings| { &mut m.git_root },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::wrappers::Int32Value>(
            "heartbeat_seconds",
            |m: &Settings| { &m.heartbeat_seconds },
            |m: &mut Settings| { &mut m.heartbeat_seconds },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::wrappers::StringValue>(
            "host",
            |m: &Settings| { &m.host },
            |m: &mut Settings| { &mut m.host },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ListStringValue>(
            "ignore_globs",
            |m: &Settings| { &m.ignore_globs },
            |m: &mut Settings| { &mut m.ignore_globs },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::wrappers::DoubleValue>(
            "init_timeout",
            |m: &Settings| { &m.init_timeout },
            |m: &mut Settings| { &mut m.init_timeout },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::wrappers::BoolValue>(
            "is_local",
            |m: &Settings| { &m.is_local },
            |m: &mut Settings| { &mut m.is_local },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::wrappers::StringValue>(
            "job_name",
            |m: &Settings| { &m.job_name },
            |m: &mut Settings| { &mut m.job_name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::wrappers::StringValue>(
            "job_source",
            |m: &Settings| { &m.job_source },
            |m: &mut Settings| { &mut m.job_source },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::wrappers::BoolValue>(
            "label_disable",
            |m: &Settings| { &m.label_disable },
            |m: &mut Settings| { &mut m.label_disable },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::wrappers::BoolValue>(
            "launch",
            |m: &Settings| { &m.launch },
            |m: &mut Settings| { &mut m.launch },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::wrappers::StringValue>(
            "launch_config_path",
            |m: &Settings| { &m.launch_config_path },
            |m: &mut Settings| { &mut m.launch_config_path },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::wrappers::StringValue>(
            "log_dir",
            |m: &Settings| { &m.log_dir },
            |m: &mut Settings| { &mut m.log_dir },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::wrappers::StringValue>(
            "log_internal",
            |m: &Settings| { &m.log_internal },
            |m: &mut Settings| { &mut m.log_internal },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::wrappers::StringValue>(
            "log_symlink_internal",
            |m: &Settings| { &m.log_symlink_internal },
            |m: &mut Settings| { &mut m.log_symlink_internal },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::wrappers::StringValue>(
            "log_symlink_user",
            |m: &Settings| { &m.log_symlink_user },
            |m: &mut Settings| { &mut m.log_symlink_user },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::wrappers::StringValue>(
            "log_user",
            |m: &Settings| { &m.log_user },
            |m: &mut Settings| { &mut m.log_user },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::wrappers::DoubleValue>(
            "login_timeout",
            |m: &Settings| { &m.login_timeout },
            |m: &mut Settings| { &mut m.login_timeout },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::wrappers::StringValue>(
            "mode",
            |m: &Settings| { &m.mode },
            |m: &mut Settings| { &mut m.mode },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::wrappers::StringValue>(
            "notebook_name",
            |m: &Settings| { &m.notebook_name },
            |m: &mut Settings| { &mut m.notebook_name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::wrappers::StringValue>(
            "problem",
            |m: &Settings| { &m.problem },
            |m: &mut Settings| { &mut m.problem },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::wrappers::StringValue>(
            "program",
            |m: &Settings| { &m.program },
            |m: &mut Settings| { &mut m.program },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::wrappers::StringValue>(
            "program_relpath",
            |m: &Settings| { &m.program_relpath },
            |m: &mut Settings| { &mut m.program_relpath },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::wrappers::StringValue>(
            "project",
            |m: &Settings| { &m.project },
            |m: &mut Settings| { &mut m.project },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::wrappers::StringValue>(
            "project_url",
            |m: &Settings| { &m.project_url },
            |m: &mut Settings| { &mut m.project_url },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::wrappers::BoolValue>(
            "quiet",
            |m: &Settings| { &m.quiet },
            |m: &mut Settings| { &mut m.quiet },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::wrappers::BoolValue>(
            "reinit",
            |m: &Settings| { &m.reinit },
            |m: &mut Settings| { &mut m.reinit },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::wrappers::BoolValue>(
            "relogin",
            |m: &Settings| { &m.relogin },
            |m: &mut Settings| { &mut m.relogin },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::wrappers::StringValue>(
            "resume",
            |m: &Settings| { &m.resume },
            |m: &mut Settings| { &mut m.resume },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::wrappers::StringValue>(
            "resume_fname",
            |m: &Settings| { &m.resume_fname },
            |m: &mut Settings| { &mut m.resume_fname },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::wrappers::BoolValue>(
            "resumed",
            |m: &Settings| { &m.resumed },
            |m: &mut Settings| { &mut m.resumed },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::wrappers::StringValue>(
            "root_dir",
            |m: &Settings| { &m.root_dir },
            |m: &mut Settings| { &mut m.root_dir },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::wrappers::StringValue>(
            "run_group",
            |m: &Settings| { &m.run_group },
            |m: &mut Settings| { &mut m.run_group },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::wrappers::StringValue>(
            "run_id",
            |m: &Settings| { &m.run_id },
            |m: &mut Settings| { &mut m.run_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::wrappers::StringValue>(
            "run_job_type",
            |m: &Settings| { &m.run_job_type },
            |m: &mut Settings| { &mut m.run_job_type },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::wrappers::StringValue>(
            "run_mode",
            |m: &Settings| { &m.run_mode },
            |m: &mut Settings| { &mut m.run_mode },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::wrappers::StringValue>(
            "run_name",
            |m: &Settings| { &m.run_name },
            |m: &mut Settings| { &mut m.run_name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::wrappers::StringValue>(
            "run_notes",
            |m: &Settings| { &m.run_notes },
            |m: &mut Settings| { &mut m.run_notes },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ListStringValue>(
            "run_tags",
            |m: &Settings| { &m.run_tags },
            |m: &mut Settings| { &mut m.run_tags },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::wrappers::StringValue>(
            "run_url",
            |m: &Settings| { &m.run_url },
            |m: &mut Settings| { &mut m.run_url },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::wrappers::BoolValue>(
            "sagemaker_disable",
            |m: &Settings| { &m.sagemaker_disable },
            |m: &mut Settings| { &mut m.sagemaker_disable },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::wrappers::BoolValue>(
            "save_code",
            |m: &Settings| { &m.save_code },
            |m: &mut Settings| { &mut m.save_code },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::wrappers::StringValue>(
            "settings_system",
            |m: &Settings| { &m.settings_system },
            |m: &mut Settings| { &mut m.settings_system },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::wrappers::StringValue>(
            "settings_workspace",
            |m: &Settings| { &m.settings_workspace },
            |m: &mut Settings| { &mut m.settings_workspace },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::wrappers::BoolValue>(
            "show_colors",
            |m: &Settings| { &m.show_colors },
            |m: &mut Settings| { &mut m.show_colors },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::wrappers::BoolValue>(
            "show_emoji",
            |m: &Settings| { &m.show_emoji },
            |m: &mut Settings| { &mut m.show_emoji },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::wrappers::BoolValue>(
            "show_errors",
            |m: &Settings| { &m.show_errors },
            |m: &mut Settings| { &mut m.show_errors },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::wrappers::BoolValue>(
            "show_info",
            |m: &Settings| { &m.show_info },
            |m: &mut Settings| { &mut m.show_info },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::wrappers::BoolValue>(
            "show_warnings",
            |m: &Settings| { &m.show_warnings },
            |m: &mut Settings| { &mut m.show_warnings },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::wrappers::BoolValue>(
            "silent",
            |m: &Settings| { &m.silent },
            |m: &mut Settings| { &mut m.silent },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::wrappers::StringValue>(
            "start_method",
            |m: &Settings| { &m.start_method },
            |m: &mut Settings| { &mut m.start_method },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::wrappers::BoolValue>(
            "strict",
            |m: &Settings| { &m.strict },
            |m: &mut Settings| { &mut m.strict },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::wrappers::Int32Value>(
            "summary_errors",
            |m: &Settings| { &m.summary_errors },
            |m: &mut Settings| { &mut m.summary_errors },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::wrappers::Int32Value>(
            "summary_timeout",
            |m: &Settings| { &m.summary_timeout },
            |m: &mut Settings| { &mut m.summary_timeout },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::wrappers::Int32Value>(
            "summary_warnings",
            |m: &Settings| { &m.summary_warnings },
            |m: &mut Settings| { &mut m.summary_warnings },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::wrappers::StringValue>(
            "sweep_id",
            |m: &Settings| { &m.sweep_id },
            |m: &mut Settings| { &mut m.sweep_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::wrappers::StringValue>(
            "sweep_param_path",
            |m: &Settings| { &m.sweep_param_path },
            |m: &mut Settings| { &mut m.sweep_param_path },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::wrappers::StringValue>(
            "sweep_url",
            |m: &Settings| { &m.sweep_url },
            |m: &mut Settings| { &mut m.sweep_url },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::wrappers::BoolValue>(
            "symlink",
            |m: &Settings| { &m.symlink },
            |m: &mut Settings| { &mut m.symlink },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::wrappers::StringValue>(
            "sync_dir",
            |m: &Settings| { &m.sync_dir },
            |m: &mut Settings| { &mut m.sync_dir },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::wrappers::StringValue>(
            "sync_file",
            |m: &Settings| { &m.sync_file },
            |m: &mut Settings| { &mut m.sync_file },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::wrappers::StringValue>(
            "sync_symlink_latest",
            |m: &Settings| { &m.sync_symlink_latest },
            |m: &mut Settings| { &mut m.sync_symlink_latest },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::wrappers::Int32Value>(
            "system_sample",
            |m: &Settings| { &m.system_sample },
            |m: &mut Settings| { &mut m.system_sample },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::wrappers::Int32Value>(
            "system_sample_seconds",
            |m: &Settings| { &m.system_sample_seconds },
            |m: &mut Settings| { &mut m.system_sample_seconds },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::wrappers::BoolValue>(
            "table_raise_on_max_row_limit_exceeded",
            |m: &Settings| { &m.table_raise_on_max_row_limit_exceeded },
            |m: &mut Settings| { &mut m.table_raise_on_max_row_limit_exceeded },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::wrappers::StringValue>(
            "timespec",
            |m: &Settings| { &m.timespec },
            |m: &mut Settings| { &mut m.timespec },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::wrappers::StringValue>(
            "tmp_dir",
            |m: &Settings| { &m.tmp_dir },
            |m: &mut Settings| { &mut m.tmp_dir },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::wrappers::StringValue>(
            "username",
            |m: &Settings| { &m.username },
            |m: &mut Settings| { &mut m.username },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::wrappers::StringValue>(
            "wandb_dir",
            |m: &Settings| { &m.wandb_dir },
            |m: &mut Settings| { &mut m.wandb_dir },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Settings>(
            "Settings",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Settings {
    const NAME: &'static str = "Settings";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self._args)?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self._aws_lambda)?;
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self._async_upload_concurrency_limit)?;
                },
                34 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self._cli_only_mode)?;
                },
                42 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self._colab)?;
                },
                50 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self._cuda)?;
                },
                58 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self._disable_meta)?;
                },
                66 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self._disable_service)?;
                },
                74 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self._disable_setproctitle)?;
                },
                82 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self._disable_stats)?;
                },
                90 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self._disable_viewer)?;
                },
                98 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self._except_exit)?;
                },
                106 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self._executable)?;
                },
                114 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self._extra_http_headers)?;
                },
                122 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self._file_stream_timeout_seconds)?;
                },
                130 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self._flow_control_custom)?;
                },
                138 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self._flow_control_disabled)?;
                },
                146 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self._internal_check_process)?;
                },
                154 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self._internal_queue_timeout)?;
                },
                162 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self._ipython)?;
                },
                170 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self._jupyter)?;
                },
                1146 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self._jupyter_name)?;
                },
                1154 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self._jupyter_path)?;
                },
                178 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self._jupyter_root)?;
                },
                186 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self._kaggle)?;
                },
                194 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self._live_policy_rate_limit)?;
                },
                202 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self._live_policy_wait_time)?;
                },
                210 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self._log_level)?;
                },
                218 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self._network_buffer)?;
                },
                226 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self._noop)?;
                },
                234 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self._notebook)?;
                },
                242 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self._offline)?;
                },
                250 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self._sync)?;
                },
                258 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self._os)?;
                },
                266 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self._platform)?;
                },
                274 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self._python)?;
                },
                282 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self._runqueue_item_id)?;
                },
                290 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self._require_nexus)?;
                },
                298 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self._save_requirements)?;
                },
                306 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self._service_transport)?;
                },
                314 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self._service_wait)?;
                },
                322 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self._start_datetime)?;
                },
                330 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self._start_time)?;
                },
                338 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self._stats_pid)?;
                },
                346 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self._stats_sample_rate_seconds)?;
                },
                354 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self._stats_samples_to_average)?;
                },
                362 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self._stats_join_assets)?;
                },
                370 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self._stats_neuron_monitor_config_path)?;
                },
                378 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self._stats_open_metrics_endpoints)?;
                },
                386 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self._stats_open_metrics_filters)?;
                },
                394 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self._tmp_code_dir)?;
                },
                402 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self._tracelog)?;
                },
                410 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self._unsaved_keys)?;
                },
                418 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self._windows)?;
                },
                426 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.allow_val_change)?;
                },
                434 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.anonymous)?;
                },
                442 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.api_key)?;
                },
                450 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.azure_account_url_to_access_key)?;
                },
                458 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.base_url)?;
                },
                466 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.code_dir)?;
                },
                474 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.config_paths)?;
                },
                482 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.console)?;
                },
                490 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.deployment)?;
                },
                498 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.disable_code)?;
                },
                506 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.disable_git)?;
                },
                514 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.disable_hints)?;
                },
                522 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.disable_job_creation)?;
                },
                530 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.disabled)?;
                },
                538 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.docker)?;
                },
                546 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.email)?;
                },
                554 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.entity)?;
                },
                562 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.files_dir)?;
                },
                570 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.force)?;
                },
                578 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.git_commit)?;
                },
                586 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.git_remote)?;
                },
                594 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.git_remote_url)?;
                },
                602 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.git_root)?;
                },
                610 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.heartbeat_seconds)?;
                },
                618 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.host)?;
                },
                626 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.ignore_globs)?;
                },
                634 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.init_timeout)?;
                },
                642 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.is_local)?;
                },
                1162 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.job_name)?;
                },
                650 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.job_source)?;
                },
                658 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.label_disable)?;
                },
                666 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.launch)?;
                },
                674 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.launch_config_path)?;
                },
                682 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.log_dir)?;
                },
                690 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.log_internal)?;
                },
                698 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.log_symlink_internal)?;
                },
                706 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.log_symlink_user)?;
                },
                714 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.log_user)?;
                },
                722 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.login_timeout)?;
                },
                738 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.mode)?;
                },
                746 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.notebook_name)?;
                },
                754 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.problem)?;
                },
                762 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.program)?;
                },
                770 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.program_relpath)?;
                },
                778 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.project)?;
                },
                786 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.project_url)?;
                },
                794 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.quiet)?;
                },
                802 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.reinit)?;
                },
                810 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.relogin)?;
                },
                818 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.resume)?;
                },
                826 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.resume_fname)?;
                },
                834 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.resumed)?;
                },
                842 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.root_dir)?;
                },
                850 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.run_group)?;
                },
                858 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.run_id)?;
                },
                866 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.run_job_type)?;
                },
                874 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.run_mode)?;
                },
                882 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.run_name)?;
                },
                890 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.run_notes)?;
                },
                898 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.run_tags)?;
                },
                906 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.run_url)?;
                },
                914 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.sagemaker_disable)?;
                },
                922 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.save_code)?;
                },
                930 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.settings_system)?;
                },
                938 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.settings_workspace)?;
                },
                946 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.show_colors)?;
                },
                954 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.show_emoji)?;
                },
                962 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.show_errors)?;
                },
                970 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.show_info)?;
                },
                978 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.show_warnings)?;
                },
                986 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.silent)?;
                },
                994 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.start_method)?;
                },
                1002 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.strict)?;
                },
                1010 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.summary_errors)?;
                },
                1018 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.summary_timeout)?;
                },
                1026 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.summary_warnings)?;
                },
                1034 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.sweep_id)?;
                },
                1042 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.sweep_param_path)?;
                },
                1050 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.sweep_url)?;
                },
                1058 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.symlink)?;
                },
                1066 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.sync_dir)?;
                },
                1074 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.sync_file)?;
                },
                1082 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.sync_symlink_latest)?;
                },
                1090 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.system_sample)?;
                },
                1098 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.system_sample_seconds)?;
                },
                1106 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.table_raise_on_max_row_limit_exceeded)?;
                },
                1114 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.timespec)?;
                },
                1122 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.tmp_dir)?;
                },
                1130 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.username)?;
                },
                1138 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.wandb_dir)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self._args.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self._aws_lambda.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self._async_upload_concurrency_limit.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self._cli_only_mode.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self._colab.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self._cuda.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self._disable_meta.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self._disable_service.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self._disable_setproctitle.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self._disable_stats.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self._disable_viewer.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self._except_exit.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self._executable.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self._extra_http_headers.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self._file_stream_timeout_seconds.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self._flow_control_custom.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self._flow_control_disabled.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self._internal_check_process.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self._internal_queue_timeout.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self._ipython.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self._jupyter.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self._jupyter_name.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self._jupyter_path.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self._jupyter_root.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self._kaggle.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self._live_policy_rate_limit.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self._live_policy_wait_time.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self._log_level.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self._network_buffer.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self._noop.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self._notebook.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self._offline.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self._sync.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self._os.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self._platform.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self._python.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self._runqueue_item_id.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self._require_nexus.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self._save_requirements.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self._service_transport.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self._service_wait.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self._start_datetime.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self._start_time.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self._stats_pid.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self._stats_sample_rate_seconds.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self._stats_samples_to_average.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self._stats_join_assets.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self._stats_neuron_monitor_config_path.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self._stats_open_metrics_endpoints.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self._stats_open_metrics_filters.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self._tmp_code_dir.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self._tracelog.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self._unsaved_keys.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self._windows.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.allow_val_change.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.anonymous.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.api_key.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.azure_account_url_to_access_key.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.base_url.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.code_dir.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.config_paths.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.console.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.deployment.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.disable_code.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.disable_git.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.disable_hints.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.disable_job_creation.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.disabled.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.docker.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.email.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.entity.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.files_dir.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.force.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.git_commit.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.git_remote.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.git_remote_url.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.git_root.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.heartbeat_seconds.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.host.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.ignore_globs.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.init_timeout.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.is_local.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.job_name.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.job_source.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.label_disable.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.launch.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.launch_config_path.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.log_dir.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.log_internal.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.log_symlink_internal.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.log_symlink_user.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.log_user.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.login_timeout.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.mode.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.notebook_name.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.problem.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.program.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.program_relpath.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.project.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.project_url.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.quiet.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.reinit.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.relogin.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.resume.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.resume_fname.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.resumed.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.root_dir.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.run_group.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.run_id.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.run_job_type.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.run_mode.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.run_name.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.run_notes.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.run_tags.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.run_url.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.sagemaker_disable.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.save_code.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.settings_system.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.settings_workspace.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.show_colors.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.show_emoji.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.show_errors.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.show_info.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.show_warnings.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.silent.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.start_method.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.strict.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.summary_errors.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.summary_timeout.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.summary_warnings.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.sweep_id.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.sweep_param_path.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.sweep_url.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.symlink.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.sync_dir.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.sync_file.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.sync_symlink_latest.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.system_sample.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.system_sample_seconds.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.table_raise_on_max_row_limit_exceeded.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.timespec.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.tmp_dir.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.username.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.wandb_dir.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self._args.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let Some(v) = self._aws_lambda.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if let Some(v) = self._async_upload_concurrency_limit.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        if let Some(v) = self._cli_only_mode.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        }
        if let Some(v) = self._colab.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
        }
        if let Some(v) = self._cuda.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(6, v, os)?;
        }
        if let Some(v) = self._disable_meta.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(7, v, os)?;
        }
        if let Some(v) = self._disable_service.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(8, v, os)?;
        }
        if let Some(v) = self._disable_setproctitle.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(9, v, os)?;
        }
        if let Some(v) = self._disable_stats.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(10, v, os)?;
        }
        if let Some(v) = self._disable_viewer.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(11, v, os)?;
        }
        if let Some(v) = self._except_exit.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(12, v, os)?;
        }
        if let Some(v) = self._executable.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(13, v, os)?;
        }
        if let Some(v) = self._extra_http_headers.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(14, v, os)?;
        }
        if let Some(v) = self._file_stream_timeout_seconds.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(15, v, os)?;
        }
        if let Some(v) = self._flow_control_custom.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(16, v, os)?;
        }
        if let Some(v) = self._flow_control_disabled.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(17, v, os)?;
        }
        if let Some(v) = self._internal_check_process.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(18, v, os)?;
        }
        if let Some(v) = self._internal_queue_timeout.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(19, v, os)?;
        }
        if let Some(v) = self._ipython.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(20, v, os)?;
        }
        if let Some(v) = self._jupyter.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(21, v, os)?;
        }
        if let Some(v) = self._jupyter_name.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(143, v, os)?;
        }
        if let Some(v) = self._jupyter_path.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(144, v, os)?;
        }
        if let Some(v) = self._jupyter_root.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(22, v, os)?;
        }
        if let Some(v) = self._kaggle.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(23, v, os)?;
        }
        if let Some(v) = self._live_policy_rate_limit.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(24, v, os)?;
        }
        if let Some(v) = self._live_policy_wait_time.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(25, v, os)?;
        }
        if let Some(v) = self._log_level.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(26, v, os)?;
        }
        if let Some(v) = self._network_buffer.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(27, v, os)?;
        }
        if let Some(v) = self._noop.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(28, v, os)?;
        }
        if let Some(v) = self._notebook.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(29, v, os)?;
        }
        if let Some(v) = self._offline.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(30, v, os)?;
        }
        if let Some(v) = self._sync.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(31, v, os)?;
        }
        if let Some(v) = self._os.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(32, v, os)?;
        }
        if let Some(v) = self._platform.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(33, v, os)?;
        }
        if let Some(v) = self._python.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(34, v, os)?;
        }
        if let Some(v) = self._runqueue_item_id.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(35, v, os)?;
        }
        if let Some(v) = self._require_nexus.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(36, v, os)?;
        }
        if let Some(v) = self._save_requirements.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(37, v, os)?;
        }
        if let Some(v) = self._service_transport.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(38, v, os)?;
        }
        if let Some(v) = self._service_wait.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(39, v, os)?;
        }
        if let Some(v) = self._start_datetime.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(40, v, os)?;
        }
        if let Some(v) = self._start_time.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(41, v, os)?;
        }
        if let Some(v) = self._stats_pid.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(42, v, os)?;
        }
        if let Some(v) = self._stats_sample_rate_seconds.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(43, v, os)?;
        }
        if let Some(v) = self._stats_samples_to_average.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(44, v, os)?;
        }
        if let Some(v) = self._stats_join_assets.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(45, v, os)?;
        }
        if let Some(v) = self._stats_neuron_monitor_config_path.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(46, v, os)?;
        }
        if let Some(v) = self._stats_open_metrics_endpoints.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(47, v, os)?;
        }
        if let Some(v) = self._stats_open_metrics_filters.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(48, v, os)?;
        }
        if let Some(v) = self._tmp_code_dir.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(49, v, os)?;
        }
        if let Some(v) = self._tracelog.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(50, v, os)?;
        }
        if let Some(v) = self._unsaved_keys.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(51, v, os)?;
        }
        if let Some(v) = self._windows.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(52, v, os)?;
        }
        if let Some(v) = self.allow_val_change.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(53, v, os)?;
        }
        if let Some(v) = self.anonymous.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(54, v, os)?;
        }
        if let Some(v) = self.api_key.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(55, v, os)?;
        }
        if let Some(v) = self.azure_account_url_to_access_key.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(56, v, os)?;
        }
        if let Some(v) = self.base_url.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(57, v, os)?;
        }
        if let Some(v) = self.code_dir.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(58, v, os)?;
        }
        if let Some(v) = self.config_paths.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(59, v, os)?;
        }
        if let Some(v) = self.console.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(60, v, os)?;
        }
        if let Some(v) = self.deployment.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(61, v, os)?;
        }
        if let Some(v) = self.disable_code.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(62, v, os)?;
        }
        if let Some(v) = self.disable_git.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(63, v, os)?;
        }
        if let Some(v) = self.disable_hints.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(64, v, os)?;
        }
        if let Some(v) = self.disable_job_creation.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(65, v, os)?;
        }
        if let Some(v) = self.disabled.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(66, v, os)?;
        }
        if let Some(v) = self.docker.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(67, v, os)?;
        }
        if let Some(v) = self.email.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(68, v, os)?;
        }
        if let Some(v) = self.entity.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(69, v, os)?;
        }
        if let Some(v) = self.files_dir.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(70, v, os)?;
        }
        if let Some(v) = self.force.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(71, v, os)?;
        }
        if let Some(v) = self.git_commit.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(72, v, os)?;
        }
        if let Some(v) = self.git_remote.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(73, v, os)?;
        }
        if let Some(v) = self.git_remote_url.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(74, v, os)?;
        }
        if let Some(v) = self.git_root.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(75, v, os)?;
        }
        if let Some(v) = self.heartbeat_seconds.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(76, v, os)?;
        }
        if let Some(v) = self.host.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(77, v, os)?;
        }
        if let Some(v) = self.ignore_globs.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(78, v, os)?;
        }
        if let Some(v) = self.init_timeout.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(79, v, os)?;
        }
        if let Some(v) = self.is_local.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(80, v, os)?;
        }
        if let Some(v) = self.job_name.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(145, v, os)?;
        }
        if let Some(v) = self.job_source.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(81, v, os)?;
        }
        if let Some(v) = self.label_disable.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(82, v, os)?;
        }
        if let Some(v) = self.launch.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(83, v, os)?;
        }
        if let Some(v) = self.launch_config_path.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(84, v, os)?;
        }
        if let Some(v) = self.log_dir.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(85, v, os)?;
        }
        if let Some(v) = self.log_internal.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(86, v, os)?;
        }
        if let Some(v) = self.log_symlink_internal.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(87, v, os)?;
        }
        if let Some(v) = self.log_symlink_user.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(88, v, os)?;
        }
        if let Some(v) = self.log_user.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(89, v, os)?;
        }
        if let Some(v) = self.login_timeout.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(90, v, os)?;
        }
        if let Some(v) = self.mode.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(92, v, os)?;
        }
        if let Some(v) = self.notebook_name.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(93, v, os)?;
        }
        if let Some(v) = self.problem.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(94, v, os)?;
        }
        if let Some(v) = self.program.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(95, v, os)?;
        }
        if let Some(v) = self.program_relpath.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(96, v, os)?;
        }
        if let Some(v) = self.project.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(97, v, os)?;
        }
        if let Some(v) = self.project_url.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(98, v, os)?;
        }
        if let Some(v) = self.quiet.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(99, v, os)?;
        }
        if let Some(v) = self.reinit.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(100, v, os)?;
        }
        if let Some(v) = self.relogin.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(101, v, os)?;
        }
        if let Some(v) = self.resume.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(102, v, os)?;
        }
        if let Some(v) = self.resume_fname.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(103, v, os)?;
        }
        if let Some(v) = self.resumed.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(104, v, os)?;
        }
        if let Some(v) = self.root_dir.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(105, v, os)?;
        }
        if let Some(v) = self.run_group.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(106, v, os)?;
        }
        if let Some(v) = self.run_id.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(107, v, os)?;
        }
        if let Some(v) = self.run_job_type.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(108, v, os)?;
        }
        if let Some(v) = self.run_mode.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(109, v, os)?;
        }
        if let Some(v) = self.run_name.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(110, v, os)?;
        }
        if let Some(v) = self.run_notes.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(111, v, os)?;
        }
        if let Some(v) = self.run_tags.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(112, v, os)?;
        }
        if let Some(v) = self.run_url.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(113, v, os)?;
        }
        if let Some(v) = self.sagemaker_disable.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(114, v, os)?;
        }
        if let Some(v) = self.save_code.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(115, v, os)?;
        }
        if let Some(v) = self.settings_system.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(116, v, os)?;
        }
        if let Some(v) = self.settings_workspace.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(117, v, os)?;
        }
        if let Some(v) = self.show_colors.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(118, v, os)?;
        }
        if let Some(v) = self.show_emoji.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(119, v, os)?;
        }
        if let Some(v) = self.show_errors.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(120, v, os)?;
        }
        if let Some(v) = self.show_info.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(121, v, os)?;
        }
        if let Some(v) = self.show_warnings.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(122, v, os)?;
        }
        if let Some(v) = self.silent.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(123, v, os)?;
        }
        if let Some(v) = self.start_method.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(124, v, os)?;
        }
        if let Some(v) = self.strict.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(125, v, os)?;
        }
        if let Some(v) = self.summary_errors.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(126, v, os)?;
        }
        if let Some(v) = self.summary_timeout.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(127, v, os)?;
        }
        if let Some(v) = self.summary_warnings.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(128, v, os)?;
        }
        if let Some(v) = self.sweep_id.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(129, v, os)?;
        }
        if let Some(v) = self.sweep_param_path.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(130, v, os)?;
        }
        if let Some(v) = self.sweep_url.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(131, v, os)?;
        }
        if let Some(v) = self.symlink.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(132, v, os)?;
        }
        if let Some(v) = self.sync_dir.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(133, v, os)?;
        }
        if let Some(v) = self.sync_file.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(134, v, os)?;
        }
        if let Some(v) = self.sync_symlink_latest.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(135, v, os)?;
        }
        if let Some(v) = self.system_sample.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(136, v, os)?;
        }
        if let Some(v) = self.system_sample_seconds.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(137, v, os)?;
        }
        if let Some(v) = self.table_raise_on_max_row_limit_exceeded.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(138, v, os)?;
        }
        if let Some(v) = self.timespec.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(139, v, os)?;
        }
        if let Some(v) = self.tmp_dir.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(140, v, os)?;
        }
        if let Some(v) = self.username.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(141, v, os)?;
        }
        if let Some(v) = self.wandb_dir.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(142, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Settings {
        Settings::new()
    }

    fn clear(&mut self) {
        self._args.clear();
        self._aws_lambda.clear();
        self._async_upload_concurrency_limit.clear();
        self._cli_only_mode.clear();
        self._colab.clear();
        self._cuda.clear();
        self._disable_meta.clear();
        self._disable_service.clear();
        self._disable_setproctitle.clear();
        self._disable_stats.clear();
        self._disable_viewer.clear();
        self._except_exit.clear();
        self._executable.clear();
        self._extra_http_headers.clear();
        self._file_stream_timeout_seconds.clear();
        self._flow_control_custom.clear();
        self._flow_control_disabled.clear();
        self._internal_check_process.clear();
        self._internal_queue_timeout.clear();
        self._ipython.clear();
        self._jupyter.clear();
        self._jupyter_name.clear();
        self._jupyter_path.clear();
        self._jupyter_root.clear();
        self._kaggle.clear();
        self._live_policy_rate_limit.clear();
        self._live_policy_wait_time.clear();
        self._log_level.clear();
        self._network_buffer.clear();
        self._noop.clear();
        self._notebook.clear();
        self._offline.clear();
        self._sync.clear();
        self._os.clear();
        self._platform.clear();
        self._python.clear();
        self._runqueue_item_id.clear();
        self._require_nexus.clear();
        self._save_requirements.clear();
        self._service_transport.clear();
        self._service_wait.clear();
        self._start_datetime.clear();
        self._start_time.clear();
        self._stats_pid.clear();
        self._stats_sample_rate_seconds.clear();
        self._stats_samples_to_average.clear();
        self._stats_join_assets.clear();
        self._stats_neuron_monitor_config_path.clear();
        self._stats_open_metrics_endpoints.clear();
        self._stats_open_metrics_filters.clear();
        self._tmp_code_dir.clear();
        self._tracelog.clear();
        self._unsaved_keys.clear();
        self._windows.clear();
        self.allow_val_change.clear();
        self.anonymous.clear();
        self.api_key.clear();
        self.azure_account_url_to_access_key.clear();
        self.base_url.clear();
        self.code_dir.clear();
        self.config_paths.clear();
        self.console.clear();
        self.deployment.clear();
        self.disable_code.clear();
        self.disable_git.clear();
        self.disable_hints.clear();
        self.disable_job_creation.clear();
        self.disabled.clear();
        self.docker.clear();
        self.email.clear();
        self.entity.clear();
        self.files_dir.clear();
        self.force.clear();
        self.git_commit.clear();
        self.git_remote.clear();
        self.git_remote_url.clear();
        self.git_root.clear();
        self.heartbeat_seconds.clear();
        self.host.clear();
        self.ignore_globs.clear();
        self.init_timeout.clear();
        self.is_local.clear();
        self.job_name.clear();
        self.job_source.clear();
        self.label_disable.clear();
        self.launch.clear();
        self.launch_config_path.clear();
        self.log_dir.clear();
        self.log_internal.clear();
        self.log_symlink_internal.clear();
        self.log_symlink_user.clear();
        self.log_user.clear();
        self.login_timeout.clear();
        self.mode.clear();
        self.notebook_name.clear();
        self.problem.clear();
        self.program.clear();
        self.program_relpath.clear();
        self.project.clear();
        self.project_url.clear();
        self.quiet.clear();
        self.reinit.clear();
        self.relogin.clear();
        self.resume.clear();
        self.resume_fname.clear();
        self.resumed.clear();
        self.root_dir.clear();
        self.run_group.clear();
        self.run_id.clear();
        self.run_job_type.clear();
        self.run_mode.clear();
        self.run_name.clear();
        self.run_notes.clear();
        self.run_tags.clear();
        self.run_url.clear();
        self.sagemaker_disable.clear();
        self.save_code.clear();
        self.settings_system.clear();
        self.settings_workspace.clear();
        self.show_colors.clear();
        self.show_emoji.clear();
        self.show_errors.clear();
        self.show_info.clear();
        self.show_warnings.clear();
        self.silent.clear();
        self.start_method.clear();
        self.strict.clear();
        self.summary_errors.clear();
        self.summary_timeout.clear();
        self.summary_warnings.clear();
        self.sweep_id.clear();
        self.sweep_param_path.clear();
        self.sweep_url.clear();
        self.symlink.clear();
        self.sync_dir.clear();
        self.sync_file.clear();
        self.sync_symlink_latest.clear();
        self.system_sample.clear();
        self.system_sample_seconds.clear();
        self.table_raise_on_max_row_limit_exceeded.clear();
        self.timespec.clear();
        self.tmp_dir.clear();
        self.username.clear();
        self.wandb_dir.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Settings {
        static instance: Settings = Settings {
            _args: ::protobuf::MessageField::none(),
            _aws_lambda: ::protobuf::MessageField::none(),
            _async_upload_concurrency_limit: ::protobuf::MessageField::none(),
            _cli_only_mode: ::protobuf::MessageField::none(),
            _colab: ::protobuf::MessageField::none(),
            _cuda: ::protobuf::MessageField::none(),
            _disable_meta: ::protobuf::MessageField::none(),
            _disable_service: ::protobuf::MessageField::none(),
            _disable_setproctitle: ::protobuf::MessageField::none(),
            _disable_stats: ::protobuf::MessageField::none(),
            _disable_viewer: ::protobuf::MessageField::none(),
            _except_exit: ::protobuf::MessageField::none(),
            _executable: ::protobuf::MessageField::none(),
            _extra_http_headers: ::protobuf::MessageField::none(),
            _file_stream_timeout_seconds: ::protobuf::MessageField::none(),
            _flow_control_custom: ::protobuf::MessageField::none(),
            _flow_control_disabled: ::protobuf::MessageField::none(),
            _internal_check_process: ::protobuf::MessageField::none(),
            _internal_queue_timeout: ::protobuf::MessageField::none(),
            _ipython: ::protobuf::MessageField::none(),
            _jupyter: ::protobuf::MessageField::none(),
            _jupyter_name: ::protobuf::MessageField::none(),
            _jupyter_path: ::protobuf::MessageField::none(),
            _jupyter_root: ::protobuf::MessageField::none(),
            _kaggle: ::protobuf::MessageField::none(),
            _live_policy_rate_limit: ::protobuf::MessageField::none(),
            _live_policy_wait_time: ::protobuf::MessageField::none(),
            _log_level: ::protobuf::MessageField::none(),
            _network_buffer: ::protobuf::MessageField::none(),
            _noop: ::protobuf::MessageField::none(),
            _notebook: ::protobuf::MessageField::none(),
            _offline: ::protobuf::MessageField::none(),
            _sync: ::protobuf::MessageField::none(),
            _os: ::protobuf::MessageField::none(),
            _platform: ::protobuf::MessageField::none(),
            _python: ::protobuf::MessageField::none(),
            _runqueue_item_id: ::protobuf::MessageField::none(),
            _require_nexus: ::protobuf::MessageField::none(),
            _save_requirements: ::protobuf::MessageField::none(),
            _service_transport: ::protobuf::MessageField::none(),
            _service_wait: ::protobuf::MessageField::none(),
            _start_datetime: ::protobuf::MessageField::none(),
            _start_time: ::protobuf::MessageField::none(),
            _stats_pid: ::protobuf::MessageField::none(),
            _stats_sample_rate_seconds: ::protobuf::MessageField::none(),
            _stats_samples_to_average: ::protobuf::MessageField::none(),
            _stats_join_assets: ::protobuf::MessageField::none(),
            _stats_neuron_monitor_config_path: ::protobuf::MessageField::none(),
            _stats_open_metrics_endpoints: ::protobuf::MessageField::none(),
            _stats_open_metrics_filters: ::protobuf::MessageField::none(),
            _tmp_code_dir: ::protobuf::MessageField::none(),
            _tracelog: ::protobuf::MessageField::none(),
            _unsaved_keys: ::protobuf::MessageField::none(),
            _windows: ::protobuf::MessageField::none(),
            allow_val_change: ::protobuf::MessageField::none(),
            anonymous: ::protobuf::MessageField::none(),
            api_key: ::protobuf::MessageField::none(),
            azure_account_url_to_access_key: ::protobuf::MessageField::none(),
            base_url: ::protobuf::MessageField::none(),
            code_dir: ::protobuf::MessageField::none(),
            config_paths: ::protobuf::MessageField::none(),
            console: ::protobuf::MessageField::none(),
            deployment: ::protobuf::MessageField::none(),
            disable_code: ::protobuf::MessageField::none(),
            disable_git: ::protobuf::MessageField::none(),
            disable_hints: ::protobuf::MessageField::none(),
            disable_job_creation: ::protobuf::MessageField::none(),
            disabled: ::protobuf::MessageField::none(),
            docker: ::protobuf::MessageField::none(),
            email: ::protobuf::MessageField::none(),
            entity: ::protobuf::MessageField::none(),
            files_dir: ::protobuf::MessageField::none(),
            force: ::protobuf::MessageField::none(),
            git_commit: ::protobuf::MessageField::none(),
            git_remote: ::protobuf::MessageField::none(),
            git_remote_url: ::protobuf::MessageField::none(),
            git_root: ::protobuf::MessageField::none(),
            heartbeat_seconds: ::protobuf::MessageField::none(),
            host: ::protobuf::MessageField::none(),
            ignore_globs: ::protobuf::MessageField::none(),
            init_timeout: ::protobuf::MessageField::none(),
            is_local: ::protobuf::MessageField::none(),
            job_name: ::protobuf::MessageField::none(),
            job_source: ::protobuf::MessageField::none(),
            label_disable: ::protobuf::MessageField::none(),
            launch: ::protobuf::MessageField::none(),
            launch_config_path: ::protobuf::MessageField::none(),
            log_dir: ::protobuf::MessageField::none(),
            log_internal: ::protobuf::MessageField::none(),
            log_symlink_internal: ::protobuf::MessageField::none(),
            log_symlink_user: ::protobuf::MessageField::none(),
            log_user: ::protobuf::MessageField::none(),
            login_timeout: ::protobuf::MessageField::none(),
            mode: ::protobuf::MessageField::none(),
            notebook_name: ::protobuf::MessageField::none(),
            problem: ::protobuf::MessageField::none(),
            program: ::protobuf::MessageField::none(),
            program_relpath: ::protobuf::MessageField::none(),
            project: ::protobuf::MessageField::none(),
            project_url: ::protobuf::MessageField::none(),
            quiet: ::protobuf::MessageField::none(),
            reinit: ::protobuf::MessageField::none(),
            relogin: ::protobuf::MessageField::none(),
            resume: ::protobuf::MessageField::none(),
            resume_fname: ::protobuf::MessageField::none(),
            resumed: ::protobuf::MessageField::none(),
            root_dir: ::protobuf::MessageField::none(),
            run_group: ::protobuf::MessageField::none(),
            run_id: ::protobuf::MessageField::none(),
            run_job_type: ::protobuf::MessageField::none(),
            run_mode: ::protobuf::MessageField::none(),
            run_name: ::protobuf::MessageField::none(),
            run_notes: ::protobuf::MessageField::none(),
            run_tags: ::protobuf::MessageField::none(),
            run_url: ::protobuf::MessageField::none(),
            sagemaker_disable: ::protobuf::MessageField::none(),
            save_code: ::protobuf::MessageField::none(),
            settings_system: ::protobuf::MessageField::none(),
            settings_workspace: ::protobuf::MessageField::none(),
            show_colors: ::protobuf::MessageField::none(),
            show_emoji: ::protobuf::MessageField::none(),
            show_errors: ::protobuf::MessageField::none(),
            show_info: ::protobuf::MessageField::none(),
            show_warnings: ::protobuf::MessageField::none(),
            silent: ::protobuf::MessageField::none(),
            start_method: ::protobuf::MessageField::none(),
            strict: ::protobuf::MessageField::none(),
            summary_errors: ::protobuf::MessageField::none(),
            summary_timeout: ::protobuf::MessageField::none(),
            summary_warnings: ::protobuf::MessageField::none(),
            sweep_id: ::protobuf::MessageField::none(),
            sweep_param_path: ::protobuf::MessageField::none(),
            sweep_url: ::protobuf::MessageField::none(),
            symlink: ::protobuf::MessageField::none(),
            sync_dir: ::protobuf::MessageField::none(),
            sync_file: ::protobuf::MessageField::none(),
            sync_symlink_latest: ::protobuf::MessageField::none(),
            system_sample: ::protobuf::MessageField::none(),
            system_sample_seconds: ::protobuf::MessageField::none(),
            table_raise_on_max_row_limit_exceeded: ::protobuf::MessageField::none(),
            timespec: ::protobuf::MessageField::none(),
            tmp_dir: ::protobuf::MessageField::none(),
            username: ::protobuf::MessageField::none(),
            wandb_dir: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Settings {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Settings").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Settings {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Settings {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x14wandb_settings.proto\x12\x0ewandb_internal\x1a\x1egoogle/protobuf/\
    wrappers.proto\"'\n\x0fListStringValue\x12\x14\n\x05value\x18\x01\x20\
    \x03(\tR\x05value\"\x9d\x01\n\x17MapStringKeyStringValue\x12H\n\x05value\
    \x18\x01\x20\x03(\x0b22.wandb_internal.MapStringKeyStringValue.ValueEntr\
    yR\x05value\x1a8\n\nValueEntry\x12\x10\n\x03key\x18\x01\x20\x01(\tR\x03k\
    ey\x12\x14\n\x05value\x18\x02\x20\x01(\tR\x05value:\x028\x01\"\xde\x01\n\
    #MapStringKeyMapStringKeyStringValue\x12T\n\x05value\x18\x01\x20\x03(\
    \x0b2>.wandb_internal.MapStringKeyMapStringKeyStringValue.ValueEntryR\
    \x05value\x1aa\n\nValueEntry\x12\x10\n\x03key\x18\x01\x20\x01(\tR\x03key\
    \x12=\n\x05value\x18\x02\x20\x01(\x0b2'.wandb_internal.MapStringKeyStrin\
    gValueR\x05value:\x028\x01\"\xad\x01\n\x12OpenMetricsFilters\x12=\n\x08s\
    equence\x18\x01\x20\x01(\x0b2\x1f.wandb_internal.ListStringValueH\0R\x08\
    sequence\x12O\n\x07mapping\x18\x02\x20\x01(\x0b23.wandb_internal.MapStri\
    ngKeyMapStringKeyStringValueH\0R\x07mappingB\x07\n\x05value\"\x9aI\n\x08\
    Settings\x124\n\x05_args\x18\x01\x20\x01(\x0b2\x1f.wandb_internal.ListSt\
    ringValueR\x04Args\x12:\n\x0b_aws_lambda\x18\x02\x20\x01(\x0b2\x1a.googl\
    e.protobuf.BoolValueR\tAwsLambda\x12a\n\x1f_async_upload_concurrency_lim\
    it\x18\x03\x20\x01(\x0b2\x1b.google.protobuf.Int32ValueR\x1bAsyncUploadC\
    oncurrencyLimit\x12?\n\x0e_cli_only_mode\x18\x04\x20\x01(\x0b2\x1a.googl\
    e.protobuf.BoolValueR\x0bCliOnlyMode\x121\n\x06_colab\x18\x05\x20\x01(\
    \x0b2\x1a.google.protobuf.BoolValueR\x05Colab\x121\n\x05_cuda\x18\x06\
    \x20\x01(\x0b2\x1c.google.protobuf.StringValueR\x04Cuda\x12>\n\r_disable\
    _meta\x18\x07\x20\x01(\x0b2\x1a.google.protobuf.BoolValueR\x0bDisableMet\
    a\x12D\n\x10_disable_service\x18\x08\x20\x01(\x0b2\x1a.google.protobuf.B\
    oolValueR\x0eDisableService\x12N\n\x15_disable_setproctitle\x18\t\x20\
    \x01(\x0b2\x1a.google.protobuf.BoolValueR\x13DisableSetproctitle\x12@\n\
    \x0e_disable_stats\x18\n\x20\x01(\x0b2\x1a.google.protobuf.BoolValueR\
    \x0cDisableStats\x12B\n\x0f_disable_viewer\x18\x0b\x20\x01(\x0b2\x1a.goo\
    gle.protobuf.BoolValueR\rDisableViewer\x12<\n\x0c_except_exit\x18\x0c\
    \x20\x01(\x0b2\x1a.google.protobuf.BoolValueR\nExceptExit\x12=\n\x0b_exe\
    cutable\x18\r\x20\x01(\x0b2\x1c.google.protobuf.StringValueR\nExecutable\
    \x12V\n\x13_extra_http_headers\x18\x0e\x20\x01(\x0b2'.wandb_internal.Map\
    StringKeyStringValueR\x10ExtraHttpHeaders\x12\\\n\x1c_file_stream_timeou\
    t_seconds\x18\x0f\x20\x01(\x0b2\x1c.google.protobuf.DoubleValueR\x18File\
    StreamTimeoutSeconds\x12K\n\x14_flow_control_custom\x18\x10\x20\x01(\x0b\
    2\x1a.google.protobuf.BoolValueR\x11FlowControlCustom\x12O\n\x16_flow_co\
    ntrol_disabled\x18\x11\x20\x01(\x0b2\x1a.google.protobuf.BoolValueR\x13F\
    lowControlDisabled\x12S\n\x17_internal_check_process\x18\x12\x20\x01(\
    \x0b2\x1c.google.protobuf.DoubleValueR\x14InternalCheckProcess\x12S\n\
    \x17_internal_queue_timeout\x18\x13\x20\x01(\x0b2\x1c.google.protobuf.Do\
    ubleValueR\x14InternalQueueTimeout\x125\n\x08_ipython\x18\x14\x20\x01(\
    \x0b2\x1a.google.protobuf.BoolValueR\x07Ipython\x125\n\x08_jupyter\x18\
    \x15\x20\x01(\x0b2\x1a.google.protobuf.BoolValueR\x07Jupyter\x12A\n\r_ju\
    pyter_name\x18\x8f\x01\x20\x01(\x0b2\x1c.google.protobuf.StringValueR\
    \x0bJupyterName\x12A\n\r_jupyter_path\x18\x90\x01\x20\x01(\x0b2\x1c.goog\
    le.protobuf.StringValueR\x0bJupyterPath\x12@\n\r_jupyter_root\x18\x16\
    \x20\x01(\x0b2\x1c.google.protobuf.StringValueR\x0bJupyterRoot\x123\n\
    \x07_kaggle\x18\x17\x20\x01(\x0b2\x1a.google.protobuf.BoolValueR\x06Kagg\
    le\x12Q\n\x17_live_policy_rate_limit\x18\x18\x20\x01(\x0b2\x1b.google.pr\
    otobuf.Int32ValueR\x13LivePolicyRateLimit\x12O\n\x16_live_policy_wait_ti\
    me\x18\x19\x20\x01(\x0b2\x1b.google.protobuf.Int32ValueR\x12LivePolicyWa\
    itTime\x129\n\n_log_level\x18\x1a\x20\x01(\x0b2\x1b.google.protobuf.Int3\
    2ValueR\x08LogLevel\x12C\n\x0f_network_buffer\x18\x1b\x20\x01(\x0b2\x1b.\
    google.protobuf.Int32ValueR\rNetworkBuffer\x12/\n\x05_noop\x18\x1c\x20\
    \x01(\x0b2\x1a.google.protobuf.BoolValueR\x04Noop\x127\n\t_notebook\x18\
    \x1d\x20\x01(\x0b2\x1a.google.protobuf.BoolValueR\x08Notebook\x125\n\x08\
    _offline\x18\x1e\x20\x01(\x0b2\x1a.google.protobuf.BoolValueR\x07Offline\
    \x12/\n\x05_sync\x18\x1f\x20\x01(\x0b2\x1a.google.protobuf.BoolValueR\
    \x04Sync\x12-\n\x03_os\x18\x20\x20\x01(\x0b2\x1c.google.protobuf.StringV\
    alueR\x02Os\x129\n\t_platform\x18!\x20\x01(\x0b2\x1c.google.protobuf.Str\
    ingValueR\x08Platform\x125\n\x07_python\x18\"\x20\x01(\x0b2\x1c.google.p\
    rotobuf.StringValueR\x06Python\x12G\n\x11_runqueue_item_id\x18#\x20\x01(\
    \x0b2\x1c.google.protobuf.StringValueR\x0eRunqueueItemId\x12@\n\x0e_requ\
    ire_nexus\x18$\x20\x01(\x0b2\x1a.google.protobuf.BoolValueR\x0cRequireNe\
    xus\x12H\n\x12_save_requirements\x18%\x20\x01(\x0b2\x1a.google.protobuf.\
    BoolValueR\x10SaveRequirements\x12J\n\x12_service_transport\x18&\x20\x01\
    (\x0b2\x1c.google.protobuf.StringValueR\x10ServiceTransport\x12@\n\r_ser\
    vice_wait\x18'\x20\x01(\x0b2\x1c.google.protobuf.DoubleValueR\x0bService\
    Wait\x12D\n\x0f_start_datetime\x18(\x20\x01(\x0b2\x1c.google.protobuf.St\
    ringValueR\rStartDatetime\x12<\n\x0b_start_time\x18)\x20\x01(\x0b2\x1c.g\
    oogle.protobuf.DoubleValueR\tStartTime\x129\n\n_stats_pid\x18*\x20\x01(\
    \x0b2\x1b.google.protobuf.Int32ValueR\x08StatsPid\x12X\n\x1a_stats_sampl\
    e_rate_seconds\x18+\x20\x01(\x0b2\x1c.google.protobuf.DoubleValueR\x16St\
    atsSampleRateSeconds\x12U\n\x19_stats_samples_to_average\x18,\x20\x01(\
    \x0b2\x1b.google.protobuf.Int32ValueR\x15StatsSamplesToAverage\x12G\n\
    \x12_stats_join_assets\x18-\x20\x01(\x0b2\x1a.google.protobuf.BoolValueR\
    \x0fStatsJoinAssets\x12e\n!_stats_neuron_monitor_config_path\x18.\x20\
    \x01(\x0b2\x1c.google.protobuf.StringValueR\x1cStatsNeuronMonitorConfigP\
    ath\x12i\n\x1d_stats_open_metrics_endpoints\x18/\x20\x01(\x0b2'.wandb_in\
    ternal.MapStringKeyStringValueR\x19StatsOpenMetricsEndpoints\x12`\n\x1b_\
    stats_open_metrics_filters\x180\x20\x01(\x0b2\".wandb_internal.OpenMetri\
    csFiltersR\x17StatsOpenMetricsFilters\x12?\n\r_tmp_code_dir\x181\x20\x01\
    (\x0b2\x1c.google.protobuf.StringValueR\nTmpCodeDir\x129\n\t_tracelog\
    \x182\x20\x01(\x0b2\x1c.google.protobuf.StringValueR\x08Tracelog\x12C\n\
    \r_unsaved_keys\x183\x20\x01(\x0b2\x1f.wandb_internal.ListStringValueR\
    \x0bUnsavedKeys\x125\n\x08_windows\x184\x20\x01(\x0b2\x1a.google.protobu\
    f.BoolValueR\x07Windows\x12D\n\x10allow_val_change\x185\x20\x01(\x0b2\
    \x1a.google.protobuf.BoolValueR\x0eallowValChange\x12:\n\tanonymous\x186\
    \x20\x01(\x0b2\x1c.google.protobuf.StringValueR\tanonymous\x125\n\x07api\
    _key\x187\x20\x01(\x0b2\x1c.google.protobuf.StringValueR\x06apiKey\x12l\
    \n\x1fazure_account_url_to_access_key\x188\x20\x01(\x0b2'.wandb_internal\
    .MapStringKeyStringValueR\x1aazureAccountUrlToAccessKey\x127\n\x08base_u\
    rl\x189\x20\x01(\x0b2\x1c.google.protobuf.StringValueR\x07baseUrl\x127\n\
    \x08code_dir\x18:\x20\x01(\x0b2\x1c.google.protobuf.StringValueR\x07code\
    Dir\x12B\n\x0cconfig_paths\x18;\x20\x01(\x0b2\x1f.wandb_internal.ListStr\
    ingValueR\x0bconfigPaths\x126\n\x07console\x18<\x20\x01(\x0b2\x1c.google\
    .protobuf.StringValueR\x07console\x12<\n\ndeployment\x18=\x20\x01(\x0b2\
    \x1c.google.protobuf.StringValueR\ndeployment\x12=\n\x0cdisable_code\x18\
    >\x20\x01(\x0b2\x1a.google.protobuf.BoolValueR\x0bdisableCode\x12;\n\x0b\
    disable_git\x18?\x20\x01(\x0b2\x1a.google.protobuf.BoolValueR\ndisableGi\
    t\x12?\n\rdisable_hints\x18@\x20\x01(\x0b2\x1a.google.protobuf.BoolValue\
    R\x0cdisableHints\x12L\n\x14disable_job_creation\x18A\x20\x01(\x0b2\x1a.\
    google.protobuf.BoolValueR\x12disableJobCreation\x126\n\x08disabled\x18B\
    \x20\x01(\x0b2\x1a.google.protobuf.BoolValueR\x08disabled\x124\n\x06dock\
    er\x18C\x20\x01(\x0b2\x1c.google.protobuf.StringValueR\x06docker\x122\n\
    \x05email\x18D\x20\x01(\x0b2\x1c.google.protobuf.StringValueR\x05email\
    \x124\n\x06entity\x18E\x20\x01(\x0b2\x1c.google.protobuf.StringValueR\
    \x06entity\x129\n\tfiles_dir\x18F\x20\x01(\x0b2\x1c.google.protobuf.Stri\
    ngValueR\x08filesDir\x120\n\x05force\x18G\x20\x01(\x0b2\x1a.google.proto\
    buf.BoolValueR\x05force\x12;\n\ngit_commit\x18H\x20\x01(\x0b2\x1c.google\
    .protobuf.StringValueR\tgitCommit\x12;\n\ngit_remote\x18I\x20\x01(\x0b2\
    \x1c.google.protobuf.StringValueR\tgitRemote\x12B\n\x0egit_remote_url\
    \x18J\x20\x01(\x0b2\x1c.google.protobuf.StringValueR\x0cgitRemoteUrl\x12\
    7\n\x08git_root\x18K\x20\x01(\x0b2\x1c.google.protobuf.StringValueR\x07g\
    itRoot\x12H\n\x11heartbeat_seconds\x18L\x20\x01(\x0b2\x1b.google.protobu\
    f.Int32ValueR\x10heartbeatSeconds\x120\n\x04host\x18M\x20\x01(\x0b2\x1c.\
    google.protobuf.StringValueR\x04host\x12B\n\x0cignore_globs\x18N\x20\x01\
    (\x0b2\x1f.wandb_internal.ListStringValueR\x0bignoreGlobs\x12?\n\x0cinit\
    _timeout\x18O\x20\x01(\x0b2\x1c.google.protobuf.DoubleValueR\x0binitTime\
    out\x125\n\x08is_local\x18P\x20\x01(\x0b2\x1a.google.protobuf.BoolValueR\
    \x07isLocal\x128\n\x08job_name\x18\x91\x01\x20\x01(\x0b2\x1c.google.prot\
    obuf.StringValueR\x07jobName\x12;\n\njob_source\x18Q\x20\x01(\x0b2\x1c.g\
    oogle.protobuf.StringValueR\tjobSource\x12?\n\rlabel_disable\x18R\x20\
    \x01(\x0b2\x1a.google.protobuf.BoolValueR\x0clabelDisable\x122\n\x06laun\
    ch\x18S\x20\x01(\x0b2\x1a.google.protobuf.BoolValueR\x06launch\x12J\n\
    \x12launch_config_path\x18T\x20\x01(\x0b2\x1c.google.protobuf.StringValu\
    eR\x10launchConfigPath\x125\n\x07log_dir\x18U\x20\x01(\x0b2\x1c.google.p\
    rotobuf.StringValueR\x06logDir\x12?\n\x0clog_internal\x18V\x20\x01(\x0b2\
    \x1c.google.protobuf.StringValueR\x0blogInternal\x12N\n\x14log_symlink_i\
    nternal\x18W\x20\x01(\x0b2\x1c.google.protobuf.StringValueR\x12logSymlin\
    kInternal\x12F\n\x10log_symlink_user\x18X\x20\x01(\x0b2\x1c.google.proto\
    buf.StringValueR\x0elogSymlinkUser\x127\n\x08log_user\x18Y\x20\x01(\x0b2\
    \x1c.google.protobuf.StringValueR\x07logUser\x12A\n\rlogin_timeout\x18Z\
    \x20\x01(\x0b2\x1c.google.protobuf.DoubleValueR\x0cloginTimeout\x120\n\
    \x04mode\x18\\\x20\x01(\x0b2\x1c.google.protobuf.StringValueR\x04mode\
    \x12A\n\rnotebook_name\x18]\x20\x01(\x0b2\x1c.google.protobuf.StringValu\
    eR\x0cnotebookName\x126\n\x07problem\x18^\x20\x01(\x0b2\x1c.google.proto\
    buf.StringValueR\x07problem\x126\n\x07program\x18_\x20\x01(\x0b2\x1c.goo\
    gle.protobuf.StringValueR\x07program\x12E\n\x0fprogram_relpath\x18`\x20\
    \x01(\x0b2\x1c.google.protobuf.StringValueR\x0eprogramRelpath\x126\n\x07\
    project\x18a\x20\x01(\x0b2\x1c.google.protobuf.StringValueR\x07project\
    \x12=\n\x0bproject_url\x18b\x20\x01(\x0b2\x1c.google.protobuf.StringValu\
    eR\nprojectUrl\x120\n\x05quiet\x18c\x20\x01(\x0b2\x1a.google.protobuf.Bo\
    olValueR\x05quiet\x122\n\x06reinit\x18d\x20\x01(\x0b2\x1a.google.protobu\
    f.BoolValueR\x06reinit\x124\n\x07relogin\x18e\x20\x01(\x0b2\x1a.google.p\
    rotobuf.BoolValueR\x07relogin\x124\n\x06resume\x18f\x20\x01(\x0b2\x1c.go\
    ogle.protobuf.StringValueR\x06resume\x12?\n\x0cresume_fname\x18g\x20\x01\
    (\x0b2\x1c.google.protobuf.StringValueR\x0bresumeFname\x124\n\x07resumed\
    \x18h\x20\x01(\x0b2\x1a.google.protobuf.BoolValueR\x07resumed\x127\n\x08\
    root_dir\x18i\x20\x01(\x0b2\x1c.google.protobuf.StringValueR\x07rootDir\
    \x129\n\trun_group\x18j\x20\x01(\x0b2\x1c.google.protobuf.StringValueR\
    \x08runGroup\x123\n\x06run_id\x18k\x20\x01(\x0b2\x1c.google.protobuf.Str\
    ingValueR\x05runId\x12>\n\x0crun_job_type\x18l\x20\x01(\x0b2\x1c.google.\
    protobuf.StringValueR\nrunJobType\x127\n\x08run_mode\x18m\x20\x01(\x0b2\
    \x1c.google.protobuf.StringValueR\x07runMode\x127\n\x08run_name\x18n\x20\
    \x01(\x0b2\x1c.google.protobuf.StringValueR\x07runName\x129\n\trun_notes\
    \x18o\x20\x01(\x0b2\x1c.google.protobuf.StringValueR\x08runNotes\x12:\n\
    \x08run_tags\x18p\x20\x01(\x0b2\x1f.wandb_internal.ListStringValueR\x07r\
    unTags\x125\n\x07run_url\x18q\x20\x01(\x0b2\x1c.google.protobuf.StringVa\
    lueR\x06runUrl\x12G\n\x11sagemaker_disable\x18r\x20\x01(\x0b2\x1a.google\
    .protobuf.BoolValueR\x10sagemakerDisable\x127\n\tsave_code\x18s\x20\x01(\
    \x0b2\x1a.google.protobuf.BoolValueR\x08saveCode\x12E\n\x0fsettings_syst\
    em\x18t\x20\x01(\x0b2\x1c.google.protobuf.StringValueR\x0esettingsSystem\
    \x12K\n\x12settings_workspace\x18u\x20\x01(\x0b2\x1c.google.protobuf.Str\
    ingValueR\x11settingsWorkspace\x12;\n\x0bshow_colors\x18v\x20\x01(\x0b2\
    \x1a.google.protobuf.BoolValueR\nshowColors\x129\n\nshow_emoji\x18w\x20\
    \x01(\x0b2\x1a.google.protobuf.BoolValueR\tshowEmoji\x12;\n\x0bshow_erro\
    rs\x18x\x20\x01(\x0b2\x1a.google.protobuf.BoolValueR\nshowErrors\x127\n\
    \tshow_info\x18y\x20\x01(\x0b2\x1a.google.protobuf.BoolValueR\x08showInf\
    o\x12?\n\rshow_warnings\x18z\x20\x01(\x0b2\x1a.google.protobuf.BoolValue\
    R\x0cshowWarnings\x122\n\x06silent\x18{\x20\x01(\x0b2\x1a.google.protobu\
    f.BoolValueR\x06silent\x12?\n\x0cstart_method\x18|\x20\x01(\x0b2\x1c.goo\
    gle.protobuf.StringValueR\x0bstartMethod\x122\n\x06strict\x18}\x20\x01(\
    \x0b2\x1a.google.protobuf.BoolValueR\x06strict\x12B\n\x0esummary_errors\
    \x18~\x20\x01(\x0b2\x1b.google.protobuf.Int32ValueR\rsummaryErrors\x12D\
    \n\x0fsummary_timeout\x18\x7f\x20\x01(\x0b2\x1b.google.protobuf.Int32Val\
    ueR\x0esummaryTimeout\x12G\n\x10summary_warnings\x18\x80\x01\x20\x01(\
    \x0b2\x1b.google.protobuf.Int32ValueR\x0fsummaryWarnings\x128\n\x08sweep\
    _id\x18\x81\x01\x20\x01(\x0b2\x1c.google.protobuf.StringValueR\x07sweepI\
    d\x12G\n\x10sweep_param_path\x18\x82\x01\x20\x01(\x0b2\x1c.google.protob\
    uf.StringValueR\x0esweepParamPath\x12:\n\tsweep_url\x18\x83\x01\x20\x01(\
    \x0b2\x1c.google.protobuf.StringValueR\x08sweepUrl\x125\n\x07symlink\x18\
    \x84\x01\x20\x01(\x0b2\x1a.google.protobuf.BoolValueR\x07symlink\x128\n\
    \x08sync_dir\x18\x85\x01\x20\x01(\x0b2\x1c.google.protobuf.StringValueR\
    \x07syncDir\x12:\n\tsync_file\x18\x86\x01\x20\x01(\x0b2\x1c.google.proto\
    buf.StringValueR\x08syncFile\x12M\n\x13sync_symlink_latest\x18\x87\x01\
    \x20\x01(\x0b2\x1c.google.protobuf.StringValueR\x11syncSymlinkLatest\x12\
    A\n\rsystem_sample\x18\x88\x01\x20\x01(\x0b2\x1b.google.protobuf.Int32Va\
    lueR\x0csystemSample\x12P\n\x15system_sample_seconds\x18\x89\x01\x20\x01\
    (\x0b2\x1b.google.protobuf.Int32ValueR\x13systemSampleSeconds\x12k\n%tab\
    le_raise_on_max_row_limit_exceeded\x18\x8a\x01\x20\x01(\x0b2\x1a.google.\
    protobuf.BoolValueR\x1ftableRaiseOnMaxRowLimitExceeded\x129\n\x08timespe\
    c\x18\x8b\x01\x20\x01(\x0b2\x1c.google.protobuf.StringValueR\x08timespec\
    \x126\n\x07tmp_dir\x18\x8c\x01\x20\x01(\x0b2\x1c.google.protobuf.StringV\
    alueR\x06tmpDir\x129\n\x08username\x18\x8d\x01\x20\x01(\x0b2\x1c.google.\
    protobuf.StringValueR\x08username\x12:\n\twandb_dir\x18\x8e\x01\x20\x01(\
    \x0b2\x1c.google.protobuf.StringValueR\x08wandbDirb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(::protobuf::well_known_types::wrappers::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(5);
            messages.push(ListStringValue::generated_message_descriptor_data());
            messages.push(MapStringKeyStringValue::generated_message_descriptor_data());
            messages.push(MapStringKeyMapStringKeyStringValue::generated_message_descriptor_data());
            messages.push(OpenMetricsFilters::generated_message_descriptor_data());
            messages.push(Settings::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
