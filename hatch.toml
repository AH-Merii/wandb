[version]
path = "wandb/__init__.py"

[build.targets.sdist]
include = ["/wandb"]

[envs.default]
# The default environment includes all extras and all dev, build, and test dependencies.
dependencies = [
    "bokeh",
    "boto3",
    "bumpversion",
    "cloudpickle",
    "coverage",
    "docker",
    "fastcore; python_version > '3.6'",
    "fastcore==1.3.29; python_version == '3.6'",
    "google-cloud-aiplatform",
    "google-cloud-storage",
    "grpcio-tools>=1.46.3",
    "grpcio>=1.46.3",
    "hypothesis",
    "imageio",
    "ipykernel",
    "ipython",
    "jax[cpu]; sys_platform == 'darwin' or sys_platform == 'linux'",
    "kfp",
    "kubernetes",
    "libcst",
    "lightgbm",
    "matplotlib!=3.5.2",
    "metaflow>=2.3.5",
    "moviepy",
    "nbclient",
    "pandas",
    "parameterized",
    "Pillow",
    "plotly",
    "prometheus_client",
    "pyarrow",
    "pytest-cov",
    "pytest-flakefinder",
    "pytest-flask",
    "pytest-mock",
    "pytest-openfiles",
    "pytest-rerunfailures",
    "pytest-split",
    "pytest-timeout",
    "pytest-xdist",
    "pytest",
    "rdkit-pypi; python_version > '3.7' or sys_platform != 'darwin' or platform.machine != 'arm64'",
    "responses",
    "scikit-learn",
    "soundfile",
    "tensorboard",
    "tensorflow-macos; python_version > '3.6' and python_version < '3.10' and sys_platform == 'darwin' and platform.machine == 'arm64'",
    "tensorflow>=1.15.2; sys_platform != 'darwin' or (python_version > '3.6' and platform.machine != 'arm64')",
    "torch",
    "torchvision",
    "tqdm",
    "twine",
    "xgboost",
]
features = ["all"]

[envs.unit]
template = "unit" # Don't inherit from the default environment.
dependencies = [
    "parameterized",
    "pytest-cov",
    "pytest-flakefinder",
    "pytest-flask",
    "pytest-mock",
    "pytest-openfiles",
    "pytest-rerunfailures",
    "pytest-split",
    "pytest-timeout",
    "pytest-xdist",
    "pytest",
]

[envs.unitshard]
template = "unit"
extra-dependencies = [ # TODO: remove after conftest.py refactor.
    "bokeh",
    "nbclient",
    "matplotlib<3.5.2",
]

[envs.test]

[envs.test.env-vars]
PIP_EXTRA_INDEX_URL = "https://download.pytorch.org/whl/cpu"
PIP_TIMEOUT = "600"
COVERAGE_FILE = "{root}/{env_name}/.coverage"
WINDIR = "C:\\Windows"

[envs.test.scripts]
pytest = [
    "- mkdir -p test-results",
    "python -m pytest {env:CI_PYTEST_SPLIT_ARGS:} -n={env:CI_PYTEST_PARALLEL:10} --durations=20 --reruns 3 --reruns-delay 1 --junitxml=test-results/junit.xml --cov-config=.coveragerc --cov --cov-report= --no-cov-on-fail {args:tests/pytest_tests}",
]
cover = [
    "- mkdir -p cover-results",
    "/usr/bin/env bash -c '{envpython} -m coverage combine {root}/py*/.coverage*'",
    "coverage xml --ignore-errors",
    "cp .coverage coverage.xml cover-results/",
    "coverage report --ignore-errors --skip-covered --omit \"wandb/vendor/*\"",
    "codecov -e HATCHENV -F unittest",
]

[[envs.test.matrix]]
python = ["36", "37", "38", "39", "310"]

[envs.test-launch]
template = "test"

[envs.test-launch.scripts]
pytest = [
    "- mkdir -p test-results",
    "python -m pytest {env:CI_PYTEST_SPLIT_ARGS:} -n={env:CI_PYTEST_PARALLEL:4} --durations=20 --reruns 3 --reruns-delay 1 --junitxml=test-results/junit.xml --cov-config=.coveragerc --cov --cov-report= --no-cov-on-fail {args:tests/pytest_tests/unit_tests_old/tests_launch/}",
]

[envs.unit-s_nb]
template = "unitshard"
extra-dependencies = ["ipykernel", "ipython", "nbclient"]

[envs.unit-s_nb.env-vars]
COVERAGE_FILE = "{root}/{env_name}/.coverage"
WINDIR = "C:\\Windows"
WB_UNIT_SHARD = "s_nb"

[envs.unit-s_nb.scripts]
pytest = [
    "- mkdir -p test-results",
    "ipython kernel install --user --name=wandb_python",
    "python -m pytest {env:CI_PYTEST_SPLIT_ARGS:} -n={env:CI_PYTEST_PARALLEL:{env:WB_UNIT_PARALLEL:4}} --durations=20 --reruns 3 --reruns-delay 1 --junitxml=test-results/junit.xml --cov-config=.coveragerc --cov --cov-report= --no-cov-on-fail --timeout 300 {args:tests/pytest_tests/unit_tests_old/tests_{env:WB_UNIT_SHARD}/}",
]

[[envs.unit-s_nb.matrix]]
python = ["36", "37", "38", "39", "310"]

[envs.empty]
detached = true # Don't require package installation.

[envs.build]
template = "empty"
dependencies = [
    "bumpversion",
    "grpcio-tools>=1.46.3",
    "grpcio>=1.46.3",
    "libcst",
    "twine",
]

[envs.covercircle]
template = "empty"
dependencies = ["pytest", "coverage", "codecov"]

[envs.covercircle.env-vars]
CIRCLE_BUILD_NUM = "{env:CIRCLE_WORKFLOW_ID}"

[envs.covercircle.scripts]
# TODO: separate this out to a "cover" command.
pytest = [
    "mkdir -p cover-results",
    "/usr/bin/env bash -c '{envpython} -m coverage combine {root}/py*/.coverage*'",
    "coverage xml --ignore-errors",
    "cp .coverage coverage.xml cover-results/",
    "coverage report --ignore-errors --skip-covered --omit \"wandb/vendor/*\"",
    "codecov -e HATCHENV -F unittest",
]
