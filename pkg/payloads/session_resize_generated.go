// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package payloads

import "encoding/json"
import "fmt"
import "reflect"

type SessionResizeJson struct {
	// ID of the session to resize
	SessionId string `json:"sessionId" yaml:"sessionId" mapstructure:"sessionId"`

	Rows uint16 `json:"rows" yaml:"rows" mapstructure:"rows"`
	Cols uint16 `json:"cols" yaml:"cols" mapstructure:"cols"`

	// Type of payload - must be session.create
	Type SessionResizeJsonType `json:"type" yaml:"type" mapstructure:"type"`
}

type SessionResizeJsonType string

const SessionResizeJsonTypeSessionResize SessionResizeJsonType = "session.resize"

var enumValues_SessionResizeJsonType = []interface{}{
	"session.resize",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SessionResizeJsonType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_SessionResizeJsonType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_SessionResizeJsonType, v)
	}
	*j = SessionResizeJsonType(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SessionResizeJson) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["sessionId"]; raw != nil && !ok {
		return fmt.Errorf("field sessionId in SessionResizeJson: required")
	}
	if _, ok := raw["type"]; raw != nil && !ok {
		return fmt.Errorf("field type in SessionResizeJson: required")
	}
	type Plain SessionResizeJson
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = SessionResizeJson(plain)
	return nil
}
