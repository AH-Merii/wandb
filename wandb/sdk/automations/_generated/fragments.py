# Generated by ariadne-codegen
# Source: wandb/sdk/automations/queries.graphql

from typing import Any, Literal, Optional, Union

from pydantic import Field

from .base_model import BaseModel
from .enums import AlertSeverity, EventTriggeringConditionType


class ArtifactPortfolioScope(BaseModel):
    typename__: str = Field(alias="__typename")
    id: str
    name: str


class ArtifactSequenceScope(BaseModel):
    typename__: str = Field(alias="__typename")
    id: str
    name: str


class SlackIntegration(BaseModel):
    typename__: str = Field(alias="__typename")
    id: str
    team_name: str = Field(alias="teamName")
    channel_name: str = Field(alias="channelName")


class NotificationAction(BaseModel):
    typename__: str = Field(alias="__typename")
    title: Optional[str]
    message: Optional[str]
    severity: Optional[AlertSeverity]
    integration: Union[
        "NotificationActionIntegrationIntegration",
        "NotificationActionIntegrationSlackIntegration",
    ] = Field(discriminator="typename__")


class NotificationActionIntegrationIntegration(BaseModel):
    typename__: Literal[
        "GenericWebhookIntegration", "GitHubOAuthIntegration", "Integration"
    ] = Field(alias="__typename")


class NotificationActionIntegrationSlackIntegration(SlackIntegration):
    typename__: Literal["SlackIntegration"] = Field(alias="__typename")


class RunQueue(BaseModel):
    id: str
    name: str


class QueueJobAction(BaseModel):
    typename__: str = Field(alias="__typename")
    template: Any
    queue: Optional["QueueJobActionQueue"]


class QueueJobActionQueue(RunQueue):
    pass


class UserInfo(BaseModel):
    id: str
    username: Optional[str]


class ProjectScope(BaseModel):
    typename__: str = Field(alias="__typename")
    id: str
    name: str


class WebhookIntegration(BaseModel):
    typename__: str = Field(alias="__typename")
    id: str
    name: str
    url_endpoint: str = Field(alias="urlEndpoint")
    secret_ref: Optional[str] = Field(alias="secretRef")
    access_token_ref: Optional[str] = Field(alias="accessTokenRef")
    created_at: Any = Field(alias="createdAt")


class WebhookAction(BaseModel):
    typename__: str = Field(alias="__typename")
    request_payload: Optional[Any] = Field(alias="requestPayload")
    integration: Union[
        "WebhookActionIntegrationIntegration",
        "WebhookActionIntegrationGenericWebhookIntegration",
    ] = Field(discriminator="typename__")


class WebhookActionIntegrationIntegration(BaseModel):
    typename__: Literal["GitHubOAuthIntegration", "Integration", "SlackIntegration"] = (
        Field(alias="__typename")
    )


class WebhookActionIntegrationGenericWebhookIntegration(WebhookIntegration):
    typename__: Literal["GenericWebhookIntegration"] = Field(alias="__typename")


class FilterEventTriggeringCondition(BaseModel):
    typename__: str = Field(alias="__typename")
    event_type: EventTriggeringConditionType = Field(alias="eventType")
    filter: str


class Trigger(BaseModel):
    typename__: str = Field(alias="__typename")
    id: str
    created_at: Any = Field(alias="createdAt")
    created_by: "TriggerCreatedBy" = Field(alias="createdBy")
    updated_at: Optional[Any] = Field(alias="updatedAt")
    name: str
    description: Optional[str]
    enabled: bool
    scope: Union[
        "TriggerScopeProject",
        "TriggerScopeArtifactSequence",
        "TriggerScopeArtifactPortfolio",
    ] = Field(discriminator="typename__")
    triggering_condition: Union[
        "TriggerTriggeringConditionFilterEventTriggeringCondition",
    ] = Field(alias="triggeringCondition", discriminator="typename__")
    triggered_action: Union[
        "TriggerTriggeredActionQueueJobTriggeredAction",
        "TriggerTriggeredActionNotificationTriggeredAction",
        "TriggerTriggeredActionGenericWebhookTriggeredAction",
    ] = Field(alias="triggeredAction", discriminator="typename__")


class TriggerCreatedBy(UserInfo):
    pass


class TriggerScopeProject(ProjectScope):
    typename__: Literal["Project"] = Field(alias="__typename")


class TriggerScopeArtifactSequence(ArtifactSequenceScope):
    typename__: Literal["ArtifactSequence"] = Field(alias="__typename")


class TriggerScopeArtifactPortfolio(ArtifactPortfolioScope):
    typename__: Literal["ArtifactPortfolio"] = Field(alias="__typename")


class TriggerTriggeringConditionFilterEventTriggeringCondition(
    FilterEventTriggeringCondition
):
    typename__: Literal["FilterEventTriggeringCondition"] = Field(alias="__typename")


class TriggerTriggeredActionQueueJobTriggeredAction(QueueJobAction):
    typename__: Literal["QueueJobTriggeredAction"] = Field(alias="__typename")


class TriggerTriggeredActionNotificationTriggeredAction(NotificationAction):
    typename__: Literal["NotificationTriggeredAction"] = Field(alias="__typename")


class TriggerTriggeredActionGenericWebhookTriggeredAction(WebhookAction):
    typename__: Literal["GenericWebhookTriggeredAction"] = Field(alias="__typename")


class CreateFilterTriggerResult(BaseModel):
    typename__: str = Field(alias="__typename")
    trigger: Optional["CreateFilterTriggerResultTrigger"]
    client_mutation_id: Optional[str] = Field(alias="clientMutationId")


class CreateFilterTriggerResultTrigger(Trigger):
    pass


class DeleteTriggerResult(BaseModel):
    typename__: str = Field(alias="__typename")
    success: bool
    client_mutation_id: Optional[str] = Field(alias="clientMutationId")


class GithubIntegration(BaseModel):
    typename__: str = Field(alias="__typename")
    id: str


ArtifactPortfolioScope.model_rebuild()
ArtifactSequenceScope.model_rebuild()
SlackIntegration.model_rebuild()
NotificationAction.model_rebuild()
RunQueue.model_rebuild()
QueueJobAction.model_rebuild()
UserInfo.model_rebuild()
ProjectScope.model_rebuild()
WebhookIntegration.model_rebuild()
WebhookAction.model_rebuild()
FilterEventTriggeringCondition.model_rebuild()
Trigger.model_rebuild()
CreateFilterTriggerResult.model_rebuild()
DeleteTriggerResult.model_rebuild()
GithubIntegration.model_rebuild()
