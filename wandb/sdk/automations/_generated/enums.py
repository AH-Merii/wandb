# Generated by ariadne-codegen
# Source: core/api/graphql/schemas/schema-latest.graphql

from enum import Enum


class CloudProvider(str, Enum):
    AWS = "AWS"
    GCP = "GCP"
    AZURE = "AZURE"
    MINIO = "MINIO"


class ArtifactCollectionType(str, Enum):
    SEQUENCE = "SEQUENCE"
    PORTFOLIO = "PORTFOLIO"


class UserProjectRestriction(str, Enum):
    OWNED = "OWNED"
    CONTRIBUTED = "CONTRIBUTED"


class StorageUnit(str, Enum):
    B = "B"
    KB = "KB"
    MB = "MB"
    GB = "GB"
    TB = "TB"
    PB = "PB"


class UserAccountType(str, Enum):
    USER = "USER"
    SERVICE = "SERVICE"
    ORG_SERVICE = "ORG_SERVICE"
    ANONYMOUS = "ANONYMOUS"
    VIEWER = "VIEWER"


class PlanType(str, Enum):
    PRIMARY = "PRIMARY"
    STORAGE = "STORAGE"
    REFERENCE = "REFERENCE"
    HOUR_OVERAGE = "HOUR_OVERAGE"


class PlanVisibility(str, Enum):
    PUBLIC = "PUBLIC"
    PRIVATE = "PRIVATE"
    DEPRECATED = "DEPRECATED"


class EmailType(str, Enum):
    PERSONAL = "PERSONAL"
    CORPORATE = "CORPORATE"
    ACADEMIC = "ACADEMIC"


class Aggregation(str, Enum):
    MAX = "MAX"
    MIN = "MIN"
    AVERAGE = "AVERAGE"
    SUM = "SUM"
    COUNT = "COUNT"


class RunQueueAccessType(str, Enum):
    PROJECT = "PROJECT"
    USER = "USER"


class RunQueuePrioritizationMode(str, Enum):
    DISABLED = "DISABLED"
    V0 = "V0"


class RunQueueItemState(str, Enum):
    PENDING = "PENDING"
    LEASED = "LEASED"
    CLAIMED = "CLAIMED"
    FAILED = "FAILED"


class DefaultResourceConfigScopeType(str, Enum):
    PROJECT = "PROJECT"
    ENTITY = "ENTITY"


class EventTriggeringConditionType(str, Enum):
    CREATE_ARTIFACT = "CREATE_ARTIFACT"
    UPDATE_ARTIFACT_ALIAS = "UPDATE_ARTIFACT_ALIAS"
    ADD_ARTIFACT_ALIAS = "ADD_ARTIFACT_ALIAS"
    LINK_MODEL = "LINK_MODEL"
    RUN_METRIC = "RUN_METRIC"


class TriggerScopeType(str, Enum):
    PROJECT = "PROJECT"
    ARTIFACT_COLLECTION = "ARTIFACT_COLLECTION"


class DotBehavior(str, Enum):
    KEEP_ALL_DOT_VALUES = "KEEP_ALL_DOT_VALUES"
    SKIP_FIRST_DOT_VALUE = "SKIP_FIRST_DOT_VALUE"


class HistoryKeysFormat(str, Enum):
    PLAINTEXT = "PLAINTEXT"
    BITMAP = "BITMAP"


class DiffOperation(str, Enum):
    INSERT = "INSERT"
    DELETE = "DELETE"
    UPDATE = "UPDATE"


class AccessTokenType(str, Enum):
    PUBLIC = "PUBLIC"
    RESTRICTED = "RESTRICTED"
    INDIVIDUAL_SHARING = "INDIVIDUAL_SHARING"


class OrgType(str, Enum):
    ORGANIZATION = "ORGANIZATION"
    PERSONAL = "PERSONAL"


class StripePaymentMethodType(str, Enum):
    CARD = "CARD"


class CardBrand(str, Enum):
    AMEX = "AMEX"
    DINERS = "DINERS"
    DISCOVER = "DISCOVER"
    INTERAC = "INTERAC"
    JCB = "JCB"
    MASTERCARD = "MASTERCARD"
    UNIONPAY = "UNIONPAY"
    UNKNOWN = "UNKNOWN"
    VISA = "VISA"


class StripeInvoiceStatus(str, Enum):
    DRAFT = "DRAFT"
    OPEN = "OPEN"
    PAID = "PAID"
    UNCOLLECTIBLE = "UNCOLLECTIBLE"
    VOID = "VOID"


class OrganizationSubscriptionType(str, Enum):
    STRIPE = "STRIPE"
    ENTERPRISE = "ENTERPRISE"
    MANUAL_TRIAL = "MANUAL_TRIAL"
    USER_LED_TRIAL = "USER_LED_TRIAL"
    ACADEMIC_TRIAL = "ACADEMIC_TRIAL"
    ACADEMIC = "ACADEMIC"
    LOCAL = "LOCAL"
    FREE_PLAN = "FREE_PLAN"


class OrganizationSubscriptionStatus(str, Enum):
    ENABLED = "ENABLED"
    DISABLED = "DISABLED"


class ArtifactState(str, Enum):
    PENDING = "PENDING"
    COMMITTED = "COMMITTED"
    DELETED = "DELETED"


class ArtifactCollectionState(str, Enum):
    READY = "READY"
    DELETED = "DELETED"


class ArtifactDigestAlgorithm(str, Enum):
    MANIFEST_MD5 = "MANIFEST_MD5"


class ArtifactStorageLayout(str, Enum):
    V1 = "V1"
    V2 = "V2"


class TraversalDirection(str, Enum):
    UPSTREAM = "UPSTREAM"
    DOWNSTREAM = "DOWNSTREAM"


class ArtifactManifestType(str, Enum):
    FULL = "FULL"
    PATCH = "PATCH"
    INCREMENTAL = "INCREMENTAL"


class DagNodeType(str, Enum):
    Artifact = "Artifact"
    Run = "Run"


class DagDirection(str, Enum):
    TowardArtifact = "TowardArtifact"
    AwayFromArtifact = "AwayFromArtifact"


class ViewSource(str, Enum):
    WANDB_UI = "WANDB_UI"
    WANDB_UI_SHARE_PANEL = "WANDB_UI_SHARE_PANEL"
    WANDB_SDK = "WANDB_SDK"
    WEAVE_UI = "WEAVE_UI"


class AlertSeverity(str, Enum):
    INFO = "INFO"
    WARN = "WARN"
    ERROR = "ERROR"


class TaskState(str, Enum):
    PENDING = "PENDING"
    RUNNING = "RUNNING"
    FINISHED = "FINISHED"
    FAILED = "FAILED"


class ExperimentType(str, Enum):
    FEATURE_FLAG = "FEATURE_FLAG"
    AB_TEST = "AB_TEST"


class ObservationalUnit(str, Enum):
    USER = "USER"
    ANONYMOUS_USER = "ANONYMOUS_USER"
    ORGANIZATION = "ORGANIZATION"
    TEAM = "TEAM"


class ErrorSeverity(str, Enum):
    WARN = "WARN"
    ERROR = "ERROR"


class CompleteMultipartAction(str, Enum):
    Complete = "Complete"


class RampIDType(str, Enum):
    None_ = "None"
    CustomID = "CustomID"
    EntityID = "EntityID"
    EntityName = "EntityName"
    OrgName = "OrgName"
    OrgID = "OrgID"
    UserID = "UserID"
    UserName = "UserName"
    ProjectID = "ProjectID"
    ApiKey = "ApiKey"


class RampType(str, Enum):
    Backend = "Backend"
    FrontendFeatureFlag = "FrontendFeatureFlag"
    FrontendBetaFlag = "FrontendBetaFlag"


class TriggeredActionType(str, Enum):
    QUEUE_JOB = "QUEUE_JOB"
    NOTIFICATION = "NOTIFICATION"
    GENERIC_WEBHOOK = "GENERIC_WEBHOOK"


class PreviewableLinkResourceType(str, Enum):
    View = "View"
    User = "User"
    Entity = "Entity"


class TaggedObjectType(str, Enum):
    ARTIFACT_COLLECTION = "ARTIFACT_COLLECTION"
    ARTIFACT = "ARTIFACT"


class WorkflowsAdminType(str, Enum):
    MODEL = "MODEL"


class UsageType(str, Enum):
    STORAGE = "STORAGE"
    TRACKED_HOURS = "TRACKED_HOURS"
    WEAVE = "WEAVE"
    USER_SEATS = "USER_SEATS"
