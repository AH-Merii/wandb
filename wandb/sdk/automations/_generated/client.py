# Generated by ariadne-codegen
# Source: wandb/sdk/automations/queries.graphql

from typing import TYPE_CHECKING, Any, Dict, Optional, Union

from .base_client import BaseClient
from .base_model import UNSET
from .operations import (
    CREATE_TRIGGER_GQL,
    DELETE_TRIGGER_GQL,
    SLACK_INTEGRATIONS_FOR_TEAM_GQL,
    SLACK_INTEGRATIONS_FOR_USER_GQL,
    TRIGGERS_IN_USER_ORGS_GQL,
)

if TYPE_CHECKING:
    from .base_model import UnsetType
    from .create_trigger import CreateTriggerCreateFilterTrigger
    from .delete_trigger import DeleteTriggerDeleteTrigger
    from .inputs import CreateFilterTriggerInput
    from .slack_integrations_for_team import SlackIntegrationsForTeamEntity
    from .slack_integrations_for_user import SlackIntegrationsForUserViewer
    from .triggers_in_user_orgs import TriggersInUserOrgsViewer


def gql(q: str) -> str:
    return q


class Client(BaseClient):
    def triggers_in_user_orgs(
        self, entity_name: Union[Optional[str], "UnsetType"] = UNSET, **kwargs: Any
    ) -> Optional["TriggersInUserOrgsViewer"]:
        from .triggers_in_user_orgs import TriggersInUserOrgs

        variables: Dict[str, object] = {"entityName": entity_name}
        response = self.execute(
            query=TRIGGERS_IN_USER_ORGS_GQL,
            operation_name="TriggersInUserOrgs",
            variables=variables,
            **kwargs,
        )
        data = self.get_data(response)
        return TriggersInUserOrgs.model_validate(data).viewer

    def create_trigger(
        self, params: "CreateFilterTriggerInput", **kwargs: Any
    ) -> Optional["CreateTriggerCreateFilterTrigger"]:
        from .create_trigger import CreateTrigger

        variables: Dict[str, object] = {"params": params}
        response = self.execute(
            query=CREATE_TRIGGER_GQL,
            operation_name="CreateTrigger",
            variables=variables,
            **kwargs,
        )
        data = self.get_data(response)
        return CreateTrigger.model_validate(data).create_filter_trigger

    def delete_trigger(
        self, id: str, **kwargs: Any
    ) -> Optional["DeleteTriggerDeleteTrigger"]:
        from .delete_trigger import DeleteTrigger

        variables: Dict[str, object] = {"id": id}
        response = self.execute(
            query=DELETE_TRIGGER_GQL,
            operation_name="DeleteTrigger",
            variables=variables,
            **kwargs,
        )
        data = self.get_data(response)
        return DeleteTrigger.model_validate(data).delete_trigger

    def slack_integrations_for_user(
        self, **kwargs: Any
    ) -> Optional["SlackIntegrationsForUserViewer"]:
        from .slack_integrations_for_user import SlackIntegrationsForUser

        variables: Dict[str, object] = {}
        response = self.execute(
            query=SLACK_INTEGRATIONS_FOR_USER_GQL,
            operation_name="SlackIntegrationsForUser",
            variables=variables,
            **kwargs,
        )
        data = self.get_data(response)
        return SlackIntegrationsForUser.model_validate(data).viewer

    def slack_integrations_for_team(
        self, entity_name: str, **kwargs: Any
    ) -> Optional["SlackIntegrationsForTeamEntity"]:
        from .slack_integrations_for_team import SlackIntegrationsForTeam

        variables: Dict[str, object] = {"entityName": entity_name}
        response = self.execute(
            query=SLACK_INTEGRATIONS_FOR_TEAM_GQL,
            operation_name="SlackIntegrationsForTeam",
            variables=variables,
            **kwargs,
        )
        data = self.get_data(response)
        return SlackIntegrationsForTeam.model_validate(data).entity
