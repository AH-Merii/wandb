# Generated by ariadne-codegen
# Source: tools/graphql_codegen/artifacts/

from __future__ import annotations

from typing import Any, Literal

from pydantic import Field

from .base import GQLBase, GQLId, SerializedToJson, Typename
from .enums import ArtifactState
from .typing_compat import Annotated


class ArtifactAliasFields(GQLBase):
    artifact_collection: (
        Annotated[
            ArtifactAliasFieldsArtifactCollectionArtifactCollection
            | ArtifactAliasFieldsArtifactCollectionArtifactPortfolio
            | ArtifactAliasFieldsArtifactCollectionArtifactSequence,
            Field(discriminator="typename__"),
        ]
        | None
    ) = Field(alias="artifactCollection")
    alias: str


class ArtifactAliasFieldsArtifactCollectionArtifactCollection(GQLBase):
    typename__: Typename[Literal["ArtifactCollection"]]


class ArtifactFields(GQLBase):
    id: GQLId
    artifact_sequence: ArtifactSequenceFields = Field(alias="artifactSequence")
    version_index: int | None = Field(alias="versionIndex")
    artifact_type: ArtifactFieldsArtifactType = Field(alias="artifactType")
    description: str | None
    metadata: SerializedToJson | None
    ttl_duration_seconds: Any = Field(alias="ttlDurationSeconds")
    ttl_is_inherited: bool = Field(alias="ttlIsInherited")
    aliases: list[ArtifactAliasFields]
    tags: list[TagFields]
    state: ArtifactState
    current_manifest: ArtifactManifestFields | None = Field(alias="currentManifest")
    commit_hash: str | None = Field(alias="commitHash")
    file_count: Any = Field(alias="fileCount")
    created_at: Any = Field(alias="createdAt")
    updated_at: Any | None = Field(alias="updatedAt")


class ArtifactFieldsArtifactType(GQLBase):
    name: str


class ArtifactManifestFields(GQLBase):
    file: ArtifactManifestFieldsFile


class ArtifactManifestFieldsFile(GQLBase):
    direct_url: str = Field(alias="directUrl")


class ArtifactPortfolioFields(GQLBase):
    typename__: Typename[str]
    project: ProjectFields | None
    name: str


class ArtifactSequenceFields(GQLBase):
    typename__: Typename[str]
    project: ProjectFields | None
    name: str


class ProjectFields(GQLBase):
    entity_name: str = Field(alias="entityName")
    name: str


class TagFields(GQLBase):
    name: str


class ArtifactAliasFieldsArtifactCollectionArtifactPortfolio(ArtifactPortfolioFields):
    typename__: Typename[Literal["ArtifactPortfolio"]]


class ArtifactAliasFieldsArtifactCollectionArtifactSequence(ArtifactSequenceFields):
    typename__: Typename[Literal["ArtifactSequence"]]


ArtifactAliasFields.model_rebuild()
ArtifactFields.model_rebuild()
ArtifactManifestFields.model_rebuild()
ArtifactPortfolioFields.model_rebuild()
ArtifactSequenceFields.model_rebuild()
ProjectFields.model_rebuild()
TagFields.model_rebuild()
