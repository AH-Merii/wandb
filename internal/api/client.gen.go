// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// Variable defines model for Variable.
type Variable struct {
	Key       string         `json:"key"`
	Sensitive *bool          `json:"sensitive,omitempty"`
	Value     Variable_Value `json:"value"`
}

// VariableValue0 defines model for .
type VariableValue0 = string

// VariableValue1 defines model for .
type VariableValue1 = float32

// VariableValue2 defines model for .
type VariableValue2 = bool

// Variable_Value defines model for Variable.Value.
type Variable_Value struct {
	union json.RawMessage
}

// CreateEnvironmentJSONBody defines parameters for CreateEnvironment.
type CreateEnvironmentJSONBody struct {
	Description     *string                 `json:"description,omitempty"`
	ExpiresAt       *time.Time              `json:"expiresAt,omitempty"`
	Name            string                  `json:"name"`
	PolicyId        *string                 `json:"policyId,omitempty"`
	ReleaseChannels *[]string               `json:"releaseChannels,omitempty"`
	ResourceFilter  *map[string]interface{} `json:"resourceFilter,omitempty"`
	SystemId        string                  `json:"systemId"`
}

// UpdateJobAgentJSONBody defines parameters for UpdateJobAgent.
type UpdateJobAgentJSONBody struct {
	Name        string `json:"name"`
	Type        string `json:"type"`
	WorkspaceId string `json:"workspaceId"`
}

// UpdateJobJSONBody defines parameters for UpdateJob.
type UpdateJobJSONBody struct {
	ExternalId *string `json:"externalId"`
	Message    *string `json:"message"`
	Status     *string `json:"status,omitempty"`
}

// CreateReleaseChannelJSONBody defines parameters for CreateReleaseChannel.
type CreateReleaseChannelJSONBody struct {
	DeploymentId  string                 `json:"deploymentId"`
	Description   *string                `json:"description"`
	Name          string                 `json:"name"`
	ReleaseFilter map[string]interface{} `json:"releaseFilter"`
}

// CreateReleaseJSONBody defines parameters for CreateRelease.
type CreateReleaseJSONBody struct {
	Config       *map[string]interface{} `json:"config,omitempty"`
	CreatedAt    *time.Time              `json:"createdAt,omitempty"`
	DeploymentId string                  `json:"deploymentId"`
	Metadata     *map[string]string      `json:"metadata,omitempty"`
	Name         *string                 `json:"name,omitempty"`
	Version      string                  `json:"version"`
}

// SetResourceProvidersResourcesJSONBody defines parameters for SetResourceProvidersResources.
type SetResourceProvidersResourcesJSONBody struct {
	Resources []struct {
		Config     map[string]interface{} `json:"config"`
		Identifier string                 `json:"identifier"`
		Kind       string                 `json:"kind"`
		Metadata   map[string]string      `json:"metadata"`
		Name       string                 `json:"name"`
		Version    string                 `json:"version"`
	} `json:"resources"`
}

// UpsertResourcesJSONBody defines parameters for UpsertResources.
type UpsertResourcesJSONBody struct {
	Resources []struct {
		Config     map[string]interface{} `json:"config"`
		Identifier string                 `json:"identifier"`
		Kind       string                 `json:"kind"`
		Metadata   *map[string]string     `json:"metadata,omitempty"`
		Name       string                 `json:"name"`
		Variables  *[]Variable            `json:"variables,omitempty"`
		Version    string                 `json:"version"`
	} `json:"resources"`
	WorkspaceId openapi_types.UUID `json:"workspaceId"`
}

// UpdateResourceJSONBody defines parameters for UpdateResource.
type UpdateResourceJSONBody struct {
	Identifier  *string            `json:"identifier,omitempty"`
	Kind        *string            `json:"kind,omitempty"`
	Metadata    *map[string]string `json:"metadata,omitempty"`
	Name        *string            `json:"name,omitempty"`
	Variables   *[]Variable        `json:"variables,omitempty"`
	Version     *string            `json:"version,omitempty"`
	WorkspaceId *string            `json:"workspaceId,omitempty"`
}

// CreateEnvironmentJSONRequestBody defines body for CreateEnvironment for application/json ContentType.
type CreateEnvironmentJSONRequestBody CreateEnvironmentJSONBody

// UpdateJobAgentJSONRequestBody defines body for UpdateJobAgent for application/json ContentType.
type UpdateJobAgentJSONRequestBody UpdateJobAgentJSONBody

// UpdateJobJSONRequestBody defines body for UpdateJob for application/json ContentType.
type UpdateJobJSONRequestBody UpdateJobJSONBody

// CreateReleaseChannelJSONRequestBody defines body for CreateReleaseChannel for application/json ContentType.
type CreateReleaseChannelJSONRequestBody CreateReleaseChannelJSONBody

// CreateReleaseJSONRequestBody defines body for CreateRelease for application/json ContentType.
type CreateReleaseJSONRequestBody CreateReleaseJSONBody

// SetResourceProvidersResourcesJSONRequestBody defines body for SetResourceProvidersResources for application/json ContentType.
type SetResourceProvidersResourcesJSONRequestBody SetResourceProvidersResourcesJSONBody

// UpsertResourcesJSONRequestBody defines body for UpsertResources for application/json ContentType.
type UpsertResourcesJSONRequestBody UpsertResourcesJSONBody

// UpdateResourceJSONRequestBody defines body for UpdateResource for application/json ContentType.
type UpdateResourceJSONRequestBody UpdateResourceJSONBody

// AsVariableValue0 returns the union data inside the Variable_Value as a VariableValue0
func (t Variable_Value) AsVariableValue0() (VariableValue0, error) {
	var body VariableValue0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromVariableValue0 overwrites any union data inside the Variable_Value as the provided VariableValue0
func (t *Variable_Value) FromVariableValue0(v VariableValue0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeVariableValue0 performs a merge with any union data inside the Variable_Value, using the provided VariableValue0
func (t *Variable_Value) MergeVariableValue0(v VariableValue0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsVariableValue1 returns the union data inside the Variable_Value as a VariableValue1
func (t Variable_Value) AsVariableValue1() (VariableValue1, error) {
	var body VariableValue1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromVariableValue1 overwrites any union data inside the Variable_Value as the provided VariableValue1
func (t *Variable_Value) FromVariableValue1(v VariableValue1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeVariableValue1 performs a merge with any union data inside the Variable_Value, using the provided VariableValue1
func (t *Variable_Value) MergeVariableValue1(v VariableValue1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsVariableValue2 returns the union data inside the Variable_Value as a VariableValue2
func (t Variable_Value) AsVariableValue2() (VariableValue2, error) {
	var body VariableValue2
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromVariableValue2 overwrites any union data inside the Variable_Value as the provided VariableValue2
func (t *Variable_Value) FromVariableValue2(v VariableValue2) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeVariableValue2 performs a merge with any union data inside the Variable_Value, using the provided VariableValue2
func (t *Variable_Value) MergeVariableValue2(v VariableValue2) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t Variable_Value) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Variable_Value) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// CreateEnvironmentWithBody request with any body
	CreateEnvironmentWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateEnvironment(ctx context.Context, body CreateEnvironmentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteEnvironment request
	DeleteEnvironment(ctx context.Context, environmentId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetEnvironment request
	GetEnvironment(ctx context.Context, environmentId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateJobAgentWithBody request with any body
	UpdateJobAgentWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateJobAgent(ctx context.Context, body UpdateJobAgentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAgentRunningJob request
	GetAgentRunningJob(ctx context.Context, agentId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AcknowledgeAgentJob request
	AcknowledgeAgentJob(ctx context.Context, agentId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetNextJobs request
	GetNextJobs(ctx context.Context, agentId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetJob request
	GetJob(ctx context.Context, jobId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateJobWithBody request with any body
	UpdateJobWithBody(ctx context.Context, jobId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateJob(ctx context.Context, jobId string, body UpdateJobJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AcknowledgeJob request
	AcknowledgeJob(ctx context.Context, jobId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateReleaseChannelWithBody request with any body
	CreateReleaseChannelWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateReleaseChannel(ctx context.Context, body CreateReleaseChannelJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateReleaseWithBody request with any body
	CreateReleaseWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateRelease(ctx context.Context, body CreateReleaseJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SetResourceProvidersResourcesWithBody request with any body
	SetResourceProvidersResourcesWithBody(ctx context.Context, providerId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SetResourceProvidersResources(ctx context.Context, providerId string, body SetResourceProvidersResourcesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpsertResourcesWithBody request with any body
	UpsertResourcesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpsertResources(ctx context.Context, body UpsertResourcesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteResource request
	DeleteResource(ctx context.Context, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetResource request
	GetResource(ctx context.Context, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateResourceWithBody request with any body
	UpdateResourceWithBody(ctx context.Context, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateResource(ctx context.Context, resourceId string, body UpdateResourceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSystem request
	GetSystem(ctx context.Context, systemId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpsertResourceProvider request
	UpsertResourceProvider(ctx context.Context, workspaceId string, name string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteResourceByIdentifier request
	DeleteResourceByIdentifier(ctx context.Context, workspaceId string, identifier string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetResourceByIdentifier request
	GetResourceByIdentifier(ctx context.Context, workspaceId string, identifier string, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) CreateEnvironmentWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateEnvironmentRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateEnvironment(ctx context.Context, body CreateEnvironmentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateEnvironmentRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteEnvironment(ctx context.Context, environmentId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteEnvironmentRequest(c.Server, environmentId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetEnvironment(ctx context.Context, environmentId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetEnvironmentRequest(c.Server, environmentId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateJobAgentWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateJobAgentRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateJobAgent(ctx context.Context, body UpdateJobAgentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateJobAgentRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAgentRunningJob(ctx context.Context, agentId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAgentRunningJobRequest(c.Server, agentId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AcknowledgeAgentJob(ctx context.Context, agentId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAcknowledgeAgentJobRequest(c.Server, agentId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetNextJobs(ctx context.Context, agentId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetNextJobsRequest(c.Server, agentId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetJob(ctx context.Context, jobId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetJobRequest(c.Server, jobId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateJobWithBody(ctx context.Context, jobId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateJobRequestWithBody(c.Server, jobId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateJob(ctx context.Context, jobId string, body UpdateJobJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateJobRequest(c.Server, jobId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AcknowledgeJob(ctx context.Context, jobId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAcknowledgeJobRequest(c.Server, jobId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateReleaseChannelWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateReleaseChannelRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateReleaseChannel(ctx context.Context, body CreateReleaseChannelJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateReleaseChannelRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateReleaseWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateReleaseRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateRelease(ctx context.Context, body CreateReleaseJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateReleaseRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SetResourceProvidersResourcesWithBody(ctx context.Context, providerId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSetResourceProvidersResourcesRequestWithBody(c.Server, providerId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SetResourceProvidersResources(ctx context.Context, providerId string, body SetResourceProvidersResourcesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSetResourceProvidersResourcesRequest(c.Server, providerId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpsertResourcesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpsertResourcesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpsertResources(ctx context.Context, body UpsertResourcesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpsertResourcesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteResource(ctx context.Context, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteResourceRequest(c.Server, resourceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetResource(ctx context.Context, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetResourceRequest(c.Server, resourceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateResourceWithBody(ctx context.Context, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateResourceRequestWithBody(c.Server, resourceId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateResource(ctx context.Context, resourceId string, body UpdateResourceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateResourceRequest(c.Server, resourceId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSystem(ctx context.Context, systemId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSystemRequest(c.Server, systemId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpsertResourceProvider(ctx context.Context, workspaceId string, name string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpsertResourceProviderRequest(c.Server, workspaceId, name)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteResourceByIdentifier(ctx context.Context, workspaceId string, identifier string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteResourceByIdentifierRequest(c.Server, workspaceId, identifier)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetResourceByIdentifier(ctx context.Context, workspaceId string, identifier string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetResourceByIdentifierRequest(c.Server, workspaceId, identifier)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewCreateEnvironmentRequest calls the generic CreateEnvironment builder with application/json body
func NewCreateEnvironmentRequest(server string, body CreateEnvironmentJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateEnvironmentRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateEnvironmentRequestWithBody generates requests for CreateEnvironment with any type of body
func NewCreateEnvironmentRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/environments")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteEnvironmentRequest generates requests for DeleteEnvironment
func NewDeleteEnvironmentRequest(server string, environmentId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/environments/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetEnvironmentRequest generates requests for GetEnvironment
func NewGetEnvironmentRequest(server string, environmentId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/environments/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateJobAgentRequest calls the generic UpdateJobAgent builder with application/json body
func NewUpdateJobAgentRequest(server string, body UpdateJobAgentJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateJobAgentRequestWithBody(server, "application/json", bodyReader)
}

// NewUpdateJobAgentRequestWithBody generates requests for UpdateJobAgent with any type of body
func NewUpdateJobAgentRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/job-agents/name")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAgentRunningJobRequest generates requests for GetAgentRunningJob
func NewGetAgentRunningJobRequest(server string, agentId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "agentId", runtime.ParamLocationPath, agentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/job-agents/%s/jobs/running", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAcknowledgeAgentJobRequest generates requests for AcknowledgeAgentJob
func NewAcknowledgeAgentJobRequest(server string, agentId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "agentId", runtime.ParamLocationPath, agentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/job-agents/%s/queue/acknowledge", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetNextJobsRequest generates requests for GetNextJobs
func NewGetNextJobsRequest(server string, agentId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "agentId", runtime.ParamLocationPath, agentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/job-agents/%s/queue/next", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetJobRequest generates requests for GetJob
func NewGetJobRequest(server string, jobId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "jobId", runtime.ParamLocationPath, jobId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/jobs/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateJobRequest calls the generic UpdateJob builder with application/json body
func NewUpdateJobRequest(server string, jobId string, body UpdateJobJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateJobRequestWithBody(server, jobId, "application/json", bodyReader)
}

// NewUpdateJobRequestWithBody generates requests for UpdateJob with any type of body
func NewUpdateJobRequestWithBody(server string, jobId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "jobId", runtime.ParamLocationPath, jobId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/jobs/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAcknowledgeJobRequest generates requests for AcknowledgeJob
func NewAcknowledgeJobRequest(server string, jobId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "jobId", runtime.ParamLocationPath, jobId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/jobs/%s/acknowledge", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateReleaseChannelRequest calls the generic CreateReleaseChannel builder with application/json body
func NewCreateReleaseChannelRequest(server string, body CreateReleaseChannelJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateReleaseChannelRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateReleaseChannelRequestWithBody generates requests for CreateReleaseChannel with any type of body
func NewCreateReleaseChannelRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/release-channels")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateReleaseRequest calls the generic CreateRelease builder with application/json body
func NewCreateReleaseRequest(server string, body CreateReleaseJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateReleaseRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateReleaseRequestWithBody generates requests for CreateRelease with any type of body
func NewCreateReleaseRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/releases")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSetResourceProvidersResourcesRequest calls the generic SetResourceProvidersResources builder with application/json body
func NewSetResourceProvidersResourcesRequest(server string, providerId string, body SetResourceProvidersResourcesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSetResourceProvidersResourcesRequestWithBody(server, providerId, "application/json", bodyReader)
}

// NewSetResourceProvidersResourcesRequestWithBody generates requests for SetResourceProvidersResources with any type of body
func NewSetResourceProvidersResourcesRequestWithBody(server string, providerId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "providerId", runtime.ParamLocationPath, providerId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/resource-providers/%s/set", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpsertResourcesRequest calls the generic UpsertResources builder with application/json body
func NewUpsertResourcesRequest(server string, body UpsertResourcesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpsertResourcesRequestWithBody(server, "application/json", bodyReader)
}

// NewUpsertResourcesRequestWithBody generates requests for UpsertResources with any type of body
func NewUpsertResourcesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/resources")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteResourceRequest generates requests for DeleteResource
func NewDeleteResourceRequest(server string, resourceId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/resources/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetResourceRequest generates requests for GetResource
func NewGetResourceRequest(server string, resourceId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/resources/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateResourceRequest calls the generic UpdateResource builder with application/json body
func NewUpdateResourceRequest(server string, resourceId string, body UpdateResourceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateResourceRequestWithBody(server, resourceId, "application/json", bodyReader)
}

// NewUpdateResourceRequestWithBody generates requests for UpdateResource with any type of body
func NewUpdateResourceRequestWithBody(server string, resourceId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/resources/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSystemRequest generates requests for GetSystem
func NewGetSystemRequest(server string, systemId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "systemId", runtime.ParamLocationPath, systemId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/systems/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpsertResourceProviderRequest generates requests for UpsertResourceProvider
func NewUpsertResourceProviderRequest(server string, workspaceId string, name string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceId", runtime.ParamLocationPath, workspaceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/workspaces/%s/resource-providers/name/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteResourceByIdentifierRequest generates requests for DeleteResourceByIdentifier
func NewDeleteResourceByIdentifierRequest(server string, workspaceId string, identifier string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceId", runtime.ParamLocationPath, workspaceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "identifier", runtime.ParamLocationPath, identifier)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/workspaces/%s/resources/identifier/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetResourceByIdentifierRequest generates requests for GetResourceByIdentifier
func NewGetResourceByIdentifierRequest(server string, workspaceId string, identifier string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceId", runtime.ParamLocationPath, workspaceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "identifier", runtime.ParamLocationPath, identifier)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/workspaces/%s/resources/identifier/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// CreateEnvironmentWithBodyWithResponse request with any body
	CreateEnvironmentWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateEnvironmentResponse, error)

	CreateEnvironmentWithResponse(ctx context.Context, body CreateEnvironmentJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateEnvironmentResponse, error)

	// DeleteEnvironmentWithResponse request
	DeleteEnvironmentWithResponse(ctx context.Context, environmentId string, reqEditors ...RequestEditorFn) (*DeleteEnvironmentResponse, error)

	// GetEnvironmentWithResponse request
	GetEnvironmentWithResponse(ctx context.Context, environmentId string, reqEditors ...RequestEditorFn) (*GetEnvironmentResponse, error)

	// UpdateJobAgentWithBodyWithResponse request with any body
	UpdateJobAgentWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateJobAgentResponse, error)

	UpdateJobAgentWithResponse(ctx context.Context, body UpdateJobAgentJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateJobAgentResponse, error)

	// GetAgentRunningJobWithResponse request
	GetAgentRunningJobWithResponse(ctx context.Context, agentId string, reqEditors ...RequestEditorFn) (*GetAgentRunningJobResponse, error)

	// AcknowledgeAgentJobWithResponse request
	AcknowledgeAgentJobWithResponse(ctx context.Context, agentId string, reqEditors ...RequestEditorFn) (*AcknowledgeAgentJobResponse, error)

	// GetNextJobsWithResponse request
	GetNextJobsWithResponse(ctx context.Context, agentId string, reqEditors ...RequestEditorFn) (*GetNextJobsResponse, error)

	// GetJobWithResponse request
	GetJobWithResponse(ctx context.Context, jobId string, reqEditors ...RequestEditorFn) (*GetJobResponse, error)

	// UpdateJobWithBodyWithResponse request with any body
	UpdateJobWithBodyWithResponse(ctx context.Context, jobId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateJobResponse, error)

	UpdateJobWithResponse(ctx context.Context, jobId string, body UpdateJobJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateJobResponse, error)

	// AcknowledgeJobWithResponse request
	AcknowledgeJobWithResponse(ctx context.Context, jobId string, reqEditors ...RequestEditorFn) (*AcknowledgeJobResponse, error)

	// CreateReleaseChannelWithBodyWithResponse request with any body
	CreateReleaseChannelWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateReleaseChannelResponse, error)

	CreateReleaseChannelWithResponse(ctx context.Context, body CreateReleaseChannelJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateReleaseChannelResponse, error)

	// CreateReleaseWithBodyWithResponse request with any body
	CreateReleaseWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateReleaseResponse, error)

	CreateReleaseWithResponse(ctx context.Context, body CreateReleaseJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateReleaseResponse, error)

	// SetResourceProvidersResourcesWithBodyWithResponse request with any body
	SetResourceProvidersResourcesWithBodyWithResponse(ctx context.Context, providerId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SetResourceProvidersResourcesResponse, error)

	SetResourceProvidersResourcesWithResponse(ctx context.Context, providerId string, body SetResourceProvidersResourcesJSONRequestBody, reqEditors ...RequestEditorFn) (*SetResourceProvidersResourcesResponse, error)

	// UpsertResourcesWithBodyWithResponse request with any body
	UpsertResourcesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpsertResourcesResponse, error)

	UpsertResourcesWithResponse(ctx context.Context, body UpsertResourcesJSONRequestBody, reqEditors ...RequestEditorFn) (*UpsertResourcesResponse, error)

	// DeleteResourceWithResponse request
	DeleteResourceWithResponse(ctx context.Context, resourceId string, reqEditors ...RequestEditorFn) (*DeleteResourceResponse, error)

	// GetResourceWithResponse request
	GetResourceWithResponse(ctx context.Context, resourceId string, reqEditors ...RequestEditorFn) (*GetResourceResponse, error)

	// UpdateResourceWithBodyWithResponse request with any body
	UpdateResourceWithBodyWithResponse(ctx context.Context, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateResourceResponse, error)

	UpdateResourceWithResponse(ctx context.Context, resourceId string, body UpdateResourceJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateResourceResponse, error)

	// GetSystemWithResponse request
	GetSystemWithResponse(ctx context.Context, systemId string, reqEditors ...RequestEditorFn) (*GetSystemResponse, error)

	// UpsertResourceProviderWithResponse request
	UpsertResourceProviderWithResponse(ctx context.Context, workspaceId string, name string, reqEditors ...RequestEditorFn) (*UpsertResourceProviderResponse, error)

	// DeleteResourceByIdentifierWithResponse request
	DeleteResourceByIdentifierWithResponse(ctx context.Context, workspaceId string, identifier string, reqEditors ...RequestEditorFn) (*DeleteResourceByIdentifierResponse, error)

	// GetResourceByIdentifierWithResponse request
	GetResourceByIdentifierWithResponse(ctx context.Context, workspaceId string, identifier string, reqEditors ...RequestEditorFn) (*GetResourceByIdentifierResponse, error)
}

type CreateEnvironmentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Environment *struct {
			Description    *string                 `json:"description"`
			ExpiresAt      *time.Time              `json:"expiresAt"`
			Id             string                  `json:"id"`
			Name           string                  `json:"name"`
			ResourceFilter *map[string]interface{} `json:"resourceFilter,omitempty"`
			SystemId       string                  `json:"systemId"`
		} `json:"environment,omitempty"`
	}
	JSON409 *struct {
		Error *string `json:"error,omitempty"`
		Id    *string `json:"id,omitempty"`
	}
	JSON500 *struct {
		Error string `json:"error"`
	}
}

// Status returns HTTPResponse.Status
func (r CreateEnvironmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateEnvironmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteEnvironmentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteEnvironmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteEnvironmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetEnvironmentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		CreatedAt   time.Time  `json:"createdAt"`
		Description *string    `json:"description"`
		ExpiresAt   *time.Time `json:"expiresAt,omitempty"`
		Id          string     `json:"id"`
		Name        string     `json:"name"`
		Policy      *struct {
			ApprovalRequirement *GetEnvironment200PolicyApprovalRequirement `json:"approvalRequirement,omitempty"`
			ConcurrencyLimit    *float32                                    `json:"concurrencyLimit,omitempty"`
			ConcurrencyType     *GetEnvironment200PolicyConcurrencyType     `json:"concurrencyType,omitempty"`
			Description         *string                                     `json:"description"`
			Id                  *string                                     `json:"id,omitempty"`
			Name                *string                                     `json:"name,omitempty"`
			ReleaseSequencing   *GetEnvironment200PolicyReleaseSequencing   `json:"releaseSequencing,omitempty"`
			RolloutDuration     *float32                                    `json:"rolloutDuration,omitempty"`
			SuccessMinimum      *float32                                    `json:"successMinimum,omitempty"`
			SuccessType         *GetEnvironment200PolicySuccessType         `json:"successType,omitempty"`
			SystemId            *string                                     `json:"systemId,omitempty"`
		} `json:"policy"`
		PolicyId        *string `json:"policyId"`
		ReleaseChannels []struct {
			ChannelId     *string `json:"channelId,omitempty"`
			DeploymentId  *string `json:"deploymentId,omitempty"`
			EnvironmentId *string `json:"environmentId,omitempty"`
			Id            *string `json:"id,omitempty"`
		} `json:"releaseChannels"`
		ResourceFilter *map[string]interface{} `json:"resourceFilter,omitempty"`
		SystemId       string                  `json:"systemId"`
	}
	JSON404 *struct {
		Error string `json:"error"`
	}
}
type GetEnvironment200PolicyApprovalRequirement string
type GetEnvironment200PolicyConcurrencyType string
type GetEnvironment200PolicyReleaseSequencing string
type GetEnvironment200PolicySuccessType string

// Status returns HTTPResponse.Status
func (r GetEnvironmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetEnvironmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateJobAgentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Id          string `json:"id"`
		Name        string `json:"name"`
		WorkspaceId string `json:"workspaceId"`
	}
}

// Status returns HTTPResponse.Status
func (r UpdateJobAgentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateJobAgentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAgentRunningJobResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]struct {
		Config         map[string]interface{}  `json:"config"`
		Deployment     *map[string]interface{} `json:"deployment,omitempty"`
		Environment    *map[string]interface{} `json:"environment,omitempty"`
		ExternalId     *string                 `json:"externalId"`
		Id             string                  `json:"id"`
		JobAgentConfig map[string]interface{}  `json:"jobAgentConfig"`
		JobAgentId     string                  `json:"jobAgentId"`
		Message        string                  `json:"message"`
		Release        *map[string]interface{} `json:"release,omitempty"`
		Runbook        *map[string]interface{} `json:"runbook,omitempty"`
		Status         string                  `json:"status"`
		Target         *map[string]interface{} `json:"target,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetAgentRunningJobResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAgentRunningJobResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AcknowledgeAgentJobResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Job *map[string]interface{} `json:"job,omitempty"`
	}
	JSON401 *struct {
		Error *string `json:"error,omitempty"`
	}
	JSON404 *struct {
		Error *string `json:"error,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r AcknowledgeAgentJobResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AcknowledgeAgentJobResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetNextJobsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Jobs *[]struct {
			// Id The job ID
			Id                  string                 `json:"id"`
			JobAgentConfig      map[string]interface{} `json:"jobAgentConfig"`
			JobAgentId          string                 `json:"jobAgentId"`
			Message             string                 `json:"message"`
			ReleaseJobTriggerId string                 `json:"releaseJobTriggerId"`
			Status              string                 `json:"status"`
		} `json:"jobs,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetNextJobsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetNextJobsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetJobResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Approval *struct {
			// Approver Null when status is pending, contains approver details when approved or rejected
			Approver *struct {
				Id   string `json:"id"`
				Name string `json:"name"`
			} `json:"approver"`
			Id     string                  `json:"id"`
			Status GetJob200ApprovalStatus `json:"status"`
		} `json:"approval"`
		CreatedAt  time.Time `json:"createdAt"`
		Deployment *struct {
			Id         string  `json:"id"`
			JobAgentId string  `json:"jobAgentId"`
			Name       *string `json:"name,omitempty"`
			Slug       string  `json:"slug"`
			SystemId   string  `json:"systemId"`
		} `json:"deployment,omitempty"`
		Environment *struct {
			Id       string `json:"id"`
			Name     string `json:"name"`
			SystemId string `json:"systemId"`
		} `json:"environment,omitempty"`

		// ExternalId External job identifier (e.g. GitHub workflow run ID)
		ExternalId *string `json:"externalId"`
		Id         string  `json:"id"`

		// JobAgentConfig Configuration for the Job Agent
		JobAgentConfig map[string]interface{} `json:"jobAgentConfig"`
		Release        *struct {
			Config   map[string]interface{} `json:"config"`
			Id       string                 `json:"id"`
			Metadata map[string]interface{} `json:"metadata"`
			Version  string                 `json:"version"`
		} `json:"release,omitempty"`
		Resource *struct {
			Config      map[string]interface{} `json:"config"`
			Id          string                 `json:"id"`
			Identifier  string                 `json:"identifier"`
			Kind        string                 `json:"kind"`
			Metadata    map[string]interface{} `json:"metadata"`
			Name        string                 `json:"name"`
			Version     string                 `json:"version"`
			WorkspaceId string                 `json:"workspaceId"`
		} `json:"resource,omitempty"`
		Runbook *struct {
			Id         string `json:"id"`
			JobAgentId string `json:"jobAgentId"`
			Name       string `json:"name"`
			SystemId   string `json:"systemId"`
		} `json:"runbook,omitempty"`
		Status    GetJob200Status        `json:"status"`
		UpdatedAt time.Time              `json:"updatedAt"`
		Variables map[string]interface{} `json:"variables"`
	}
	JSON404 *struct {
		Error *string `json:"error,omitempty"`
	}
}
type GetJob200ApprovalStatus string
type GetJob200Status string

// Status returns HTTPResponse.Status
func (r GetJobResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetJobResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateJobResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Id string `json:"id"`
	}
}

// Status returns HTTPResponse.Status
func (r UpdateJobResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateJobResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AcknowledgeJobResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Sucess bool `json:"sucess"`
	}
	JSON401 *struct {
		Error string `json:"error"`
	}
}

// Status returns HTTPResponse.Status
func (r AcknowledgeJobResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AcknowledgeJobResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateReleaseChannelResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		CreatedAt     time.Time               `json:"createdAt"`
		DeploymentId  string                  `json:"deploymentId"`
		Description   *string                 `json:"description"`
		Id            string                  `json:"id"`
		Name          string                  `json:"name"`
		ReleaseFilter *map[string]interface{} `json:"releaseFilter,omitempty"`
	}
	JSON401 *struct {
		Error string `json:"error"`
	}
	JSON403 *struct {
		Error string `json:"error"`
	}
	JSON409 *struct {
		Error string `json:"error"`
		Id    string `json:"id"`
	}
	JSON500 *struct {
		Error string `json:"error"`
	}
}

// Status returns HTTPResponse.Status
func (r CreateReleaseChannelResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateReleaseChannelResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateReleaseResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Id       *string            `json:"id,omitempty"`
		Metadata *map[string]string `json:"metadata,omitempty"`
		Version  *string            `json:"version,omitempty"`
	}
	JSON409 *struct {
		Error *string `json:"error,omitempty"`
		Id    *string `json:"id,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r CreateReleaseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateReleaseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SetResourceProvidersResourcesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r SetResourceProvidersResourcesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SetResourceProvidersResourcesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpsertResourcesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Count *float32 `json:"count,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r UpsertResourcesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpsertResourcesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteResourceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Success bool `json:"success"`
	}
	JSON404 *struct {
		Error string `json:"error"`
	}
}

// Status returns HTTPResponse.Status
func (r DeleteResourceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteResourceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetResourceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Config     map[string]interface{} `json:"config"`
		Id         string                 `json:"id"`
		Identifier string                 `json:"identifier"`
		Kind       string                 `json:"kind"`
		LockedAt   *time.Time             `json:"lockedAt"`
		Metadata   map[string]string      `json:"metadata"`
		Name       string                 `json:"name"`
		Provider   *struct {
			Id   *string `json:"id,omitempty"`
			Name *string `json:"name,omitempty"`
		} `json:"provider"`
		UpdatedAt   time.Time         `json:"updatedAt"`
		Variable    map[string]string `json:"variable"`
		Version     string            `json:"version"`
		WorkspaceId string            `json:"workspaceId"`
	}
	JSON404 *struct {
		Error string `json:"error"`
	}
}

// Status returns HTTPResponse.Status
func (r GetResourceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetResourceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateResourceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Config      map[string]interface{} `json:"config"`
		Id          string                 `json:"id"`
		Identifier  string                 `json:"identifier"`
		Kind        string                 `json:"kind"`
		Metadata    map[string]string      `json:"metadata"`
		Name        string                 `json:"name"`
		Version     string                 `json:"version"`
		WorkspaceId string                 `json:"workspaceId"`
	}
	JSON404 *struct {
		Error string `json:"error"`
	}
}

// Status returns HTTPResponse.Status
func (r UpdateResourceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateResourceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSystemResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Deployments []struct {
			Description    *string                 `json:"description,omitempty"`
			Id             *string                 `json:"id,omitempty"`
			JobAgentConfig *map[string]interface{} `json:"jobAgentConfig,omitempty"`
			JobAgentId     *string                 `json:"jobAgentId"`
			Name           *string                 `json:"name,omitempty"`
			Slug           *string                 `json:"slug,omitempty"`
			SystemId       *string                 `json:"systemId,omitempty"`
		} `json:"deployments"`
		Description  string `json:"description"`
		Environments []struct {
			CreatedAt      *time.Time              `json:"createdAt,omitempty"`
			Description    *string                 `json:"description"`
			ExpiresAt      *time.Time              `json:"expiresAt"`
			Id             *string                 `json:"id,omitempty"`
			Name           *string                 `json:"name,omitempty"`
			PolicyId       *string                 `json:"policyId"`
			ResourceFilter *map[string]interface{} `json:"resourceFilter"`
			SystemId       *string                 `json:"systemId,omitempty"`
		} `json:"environments"`
		Id          string `json:"id"`
		Name        string `json:"name"`
		Slug        string `json:"slug"`
		WorkspaceId string `json:"workspaceId"`
	}
}

// Status returns HTTPResponse.Status
func (r GetSystemResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSystemResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpsertResourceProviderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Id          string `json:"id"`
		Name        string `json:"name"`
		WorkspaceId string `json:"workspaceId"`
	}
}

// Status returns HTTPResponse.Status
func (r UpsertResourceProviderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpsertResourceProviderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteResourceByIdentifierResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Success *bool `json:"success,omitempty"`
	}
	JSON404 *struct {
		Error *string `json:"error,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r DeleteResourceByIdentifierResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteResourceByIdentifierResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetResourceByIdentifierResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Id         string             `json:"id"`
		Identifier string             `json:"identifier"`
		Metadata   *map[string]string `json:"metadata,omitempty"`
		Provider   *struct {
			Id          *string `json:"id,omitempty"`
			Name        *string `json:"name,omitempty"`
			WorkspaceId *string `json:"workspaceId,omitempty"`
		} `json:"provider,omitempty"`
		ProviderId string `json:"providerId"`
		Variables  *[]struct {
			Id    *string `json:"id,omitempty"`
			Key   *string `json:"key,omitempty"`
			Value *string `json:"value,omitempty"`
		} `json:"variables,omitempty"`
		WorkspaceId string `json:"workspaceId"`
	}
	JSON404 *struct {
		Error *string `json:"error,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetResourceByIdentifierResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetResourceByIdentifierResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// CreateEnvironmentWithBodyWithResponse request with arbitrary body returning *CreateEnvironmentResponse
func (c *ClientWithResponses) CreateEnvironmentWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateEnvironmentResponse, error) {
	rsp, err := c.CreateEnvironmentWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateEnvironmentResponse(rsp)
}

func (c *ClientWithResponses) CreateEnvironmentWithResponse(ctx context.Context, body CreateEnvironmentJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateEnvironmentResponse, error) {
	rsp, err := c.CreateEnvironment(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateEnvironmentResponse(rsp)
}

// DeleteEnvironmentWithResponse request returning *DeleteEnvironmentResponse
func (c *ClientWithResponses) DeleteEnvironmentWithResponse(ctx context.Context, environmentId string, reqEditors ...RequestEditorFn) (*DeleteEnvironmentResponse, error) {
	rsp, err := c.DeleteEnvironment(ctx, environmentId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteEnvironmentResponse(rsp)
}

// GetEnvironmentWithResponse request returning *GetEnvironmentResponse
func (c *ClientWithResponses) GetEnvironmentWithResponse(ctx context.Context, environmentId string, reqEditors ...RequestEditorFn) (*GetEnvironmentResponse, error) {
	rsp, err := c.GetEnvironment(ctx, environmentId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetEnvironmentResponse(rsp)
}

// UpdateJobAgentWithBodyWithResponse request with arbitrary body returning *UpdateJobAgentResponse
func (c *ClientWithResponses) UpdateJobAgentWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateJobAgentResponse, error) {
	rsp, err := c.UpdateJobAgentWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateJobAgentResponse(rsp)
}

func (c *ClientWithResponses) UpdateJobAgentWithResponse(ctx context.Context, body UpdateJobAgentJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateJobAgentResponse, error) {
	rsp, err := c.UpdateJobAgent(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateJobAgentResponse(rsp)
}

// GetAgentRunningJobWithResponse request returning *GetAgentRunningJobResponse
func (c *ClientWithResponses) GetAgentRunningJobWithResponse(ctx context.Context, agentId string, reqEditors ...RequestEditorFn) (*GetAgentRunningJobResponse, error) {
	rsp, err := c.GetAgentRunningJob(ctx, agentId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAgentRunningJobResponse(rsp)
}

// AcknowledgeAgentJobWithResponse request returning *AcknowledgeAgentJobResponse
func (c *ClientWithResponses) AcknowledgeAgentJobWithResponse(ctx context.Context, agentId string, reqEditors ...RequestEditorFn) (*AcknowledgeAgentJobResponse, error) {
	rsp, err := c.AcknowledgeAgentJob(ctx, agentId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAcknowledgeAgentJobResponse(rsp)
}

// GetNextJobsWithResponse request returning *GetNextJobsResponse
func (c *ClientWithResponses) GetNextJobsWithResponse(ctx context.Context, agentId string, reqEditors ...RequestEditorFn) (*GetNextJobsResponse, error) {
	rsp, err := c.GetNextJobs(ctx, agentId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetNextJobsResponse(rsp)
}

// GetJobWithResponse request returning *GetJobResponse
func (c *ClientWithResponses) GetJobWithResponse(ctx context.Context, jobId string, reqEditors ...RequestEditorFn) (*GetJobResponse, error) {
	rsp, err := c.GetJob(ctx, jobId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetJobResponse(rsp)
}

// UpdateJobWithBodyWithResponse request with arbitrary body returning *UpdateJobResponse
func (c *ClientWithResponses) UpdateJobWithBodyWithResponse(ctx context.Context, jobId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateJobResponse, error) {
	rsp, err := c.UpdateJobWithBody(ctx, jobId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateJobResponse(rsp)
}

func (c *ClientWithResponses) UpdateJobWithResponse(ctx context.Context, jobId string, body UpdateJobJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateJobResponse, error) {
	rsp, err := c.UpdateJob(ctx, jobId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateJobResponse(rsp)
}

// AcknowledgeJobWithResponse request returning *AcknowledgeJobResponse
func (c *ClientWithResponses) AcknowledgeJobWithResponse(ctx context.Context, jobId string, reqEditors ...RequestEditorFn) (*AcknowledgeJobResponse, error) {
	rsp, err := c.AcknowledgeJob(ctx, jobId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAcknowledgeJobResponse(rsp)
}

// CreateReleaseChannelWithBodyWithResponse request with arbitrary body returning *CreateReleaseChannelResponse
func (c *ClientWithResponses) CreateReleaseChannelWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateReleaseChannelResponse, error) {
	rsp, err := c.CreateReleaseChannelWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateReleaseChannelResponse(rsp)
}

func (c *ClientWithResponses) CreateReleaseChannelWithResponse(ctx context.Context, body CreateReleaseChannelJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateReleaseChannelResponse, error) {
	rsp, err := c.CreateReleaseChannel(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateReleaseChannelResponse(rsp)
}

// CreateReleaseWithBodyWithResponse request with arbitrary body returning *CreateReleaseResponse
func (c *ClientWithResponses) CreateReleaseWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateReleaseResponse, error) {
	rsp, err := c.CreateReleaseWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateReleaseResponse(rsp)
}

func (c *ClientWithResponses) CreateReleaseWithResponse(ctx context.Context, body CreateReleaseJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateReleaseResponse, error) {
	rsp, err := c.CreateRelease(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateReleaseResponse(rsp)
}

// SetResourceProvidersResourcesWithBodyWithResponse request with arbitrary body returning *SetResourceProvidersResourcesResponse
func (c *ClientWithResponses) SetResourceProvidersResourcesWithBodyWithResponse(ctx context.Context, providerId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SetResourceProvidersResourcesResponse, error) {
	rsp, err := c.SetResourceProvidersResourcesWithBody(ctx, providerId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSetResourceProvidersResourcesResponse(rsp)
}

func (c *ClientWithResponses) SetResourceProvidersResourcesWithResponse(ctx context.Context, providerId string, body SetResourceProvidersResourcesJSONRequestBody, reqEditors ...RequestEditorFn) (*SetResourceProvidersResourcesResponse, error) {
	rsp, err := c.SetResourceProvidersResources(ctx, providerId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSetResourceProvidersResourcesResponse(rsp)
}

// UpsertResourcesWithBodyWithResponse request with arbitrary body returning *UpsertResourcesResponse
func (c *ClientWithResponses) UpsertResourcesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpsertResourcesResponse, error) {
	rsp, err := c.UpsertResourcesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpsertResourcesResponse(rsp)
}

func (c *ClientWithResponses) UpsertResourcesWithResponse(ctx context.Context, body UpsertResourcesJSONRequestBody, reqEditors ...RequestEditorFn) (*UpsertResourcesResponse, error) {
	rsp, err := c.UpsertResources(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpsertResourcesResponse(rsp)
}

// DeleteResourceWithResponse request returning *DeleteResourceResponse
func (c *ClientWithResponses) DeleteResourceWithResponse(ctx context.Context, resourceId string, reqEditors ...RequestEditorFn) (*DeleteResourceResponse, error) {
	rsp, err := c.DeleteResource(ctx, resourceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteResourceResponse(rsp)
}

// GetResourceWithResponse request returning *GetResourceResponse
func (c *ClientWithResponses) GetResourceWithResponse(ctx context.Context, resourceId string, reqEditors ...RequestEditorFn) (*GetResourceResponse, error) {
	rsp, err := c.GetResource(ctx, resourceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetResourceResponse(rsp)
}

// UpdateResourceWithBodyWithResponse request with arbitrary body returning *UpdateResourceResponse
func (c *ClientWithResponses) UpdateResourceWithBodyWithResponse(ctx context.Context, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateResourceResponse, error) {
	rsp, err := c.UpdateResourceWithBody(ctx, resourceId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateResourceResponse(rsp)
}

func (c *ClientWithResponses) UpdateResourceWithResponse(ctx context.Context, resourceId string, body UpdateResourceJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateResourceResponse, error) {
	rsp, err := c.UpdateResource(ctx, resourceId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateResourceResponse(rsp)
}

// GetSystemWithResponse request returning *GetSystemResponse
func (c *ClientWithResponses) GetSystemWithResponse(ctx context.Context, systemId string, reqEditors ...RequestEditorFn) (*GetSystemResponse, error) {
	rsp, err := c.GetSystem(ctx, systemId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSystemResponse(rsp)
}

// UpsertResourceProviderWithResponse request returning *UpsertResourceProviderResponse
func (c *ClientWithResponses) UpsertResourceProviderWithResponse(ctx context.Context, workspaceId string, name string, reqEditors ...RequestEditorFn) (*UpsertResourceProviderResponse, error) {
	rsp, err := c.UpsertResourceProvider(ctx, workspaceId, name, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpsertResourceProviderResponse(rsp)
}

// DeleteResourceByIdentifierWithResponse request returning *DeleteResourceByIdentifierResponse
func (c *ClientWithResponses) DeleteResourceByIdentifierWithResponse(ctx context.Context, workspaceId string, identifier string, reqEditors ...RequestEditorFn) (*DeleteResourceByIdentifierResponse, error) {
	rsp, err := c.DeleteResourceByIdentifier(ctx, workspaceId, identifier, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteResourceByIdentifierResponse(rsp)
}

// GetResourceByIdentifierWithResponse request returning *GetResourceByIdentifierResponse
func (c *ClientWithResponses) GetResourceByIdentifierWithResponse(ctx context.Context, workspaceId string, identifier string, reqEditors ...RequestEditorFn) (*GetResourceByIdentifierResponse, error) {
	rsp, err := c.GetResourceByIdentifier(ctx, workspaceId, identifier, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetResourceByIdentifierResponse(rsp)
}

// ParseCreateEnvironmentResponse parses an HTTP response from a CreateEnvironmentWithResponse call
func ParseCreateEnvironmentResponse(rsp *http.Response) (*CreateEnvironmentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateEnvironmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Environment *struct {
				Description    *string                 `json:"description"`
				ExpiresAt      *time.Time              `json:"expiresAt"`
				Id             string                  `json:"id"`
				Name           string                  `json:"name"`
				ResourceFilter *map[string]interface{} `json:"resourceFilter,omitempty"`
				SystemId       string                  `json:"systemId"`
			} `json:"environment,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest struct {
			Error *string `json:"error,omitempty"`
			Id    *string `json:"id,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Error string `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteEnvironmentResponse parses an HTTP response from a DeleteEnvironmentWithResponse call
func ParseDeleteEnvironmentResponse(rsp *http.Response) (*DeleteEnvironmentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteEnvironmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetEnvironmentResponse parses an HTTP response from a GetEnvironmentWithResponse call
func ParseGetEnvironmentResponse(rsp *http.Response) (*GetEnvironmentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetEnvironmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			CreatedAt   time.Time  `json:"createdAt"`
			Description *string    `json:"description"`
			ExpiresAt   *time.Time `json:"expiresAt,omitempty"`
			Id          string     `json:"id"`
			Name        string     `json:"name"`
			Policy      *struct {
				ApprovalRequirement *GetEnvironment200PolicyApprovalRequirement `json:"approvalRequirement,omitempty"`
				ConcurrencyLimit    *float32                                    `json:"concurrencyLimit,omitempty"`
				ConcurrencyType     *GetEnvironment200PolicyConcurrencyType     `json:"concurrencyType,omitempty"`
				Description         *string                                     `json:"description"`
				Id                  *string                                     `json:"id,omitempty"`
				Name                *string                                     `json:"name,omitempty"`
				ReleaseSequencing   *GetEnvironment200PolicyReleaseSequencing   `json:"releaseSequencing,omitempty"`
				RolloutDuration     *float32                                    `json:"rolloutDuration,omitempty"`
				SuccessMinimum      *float32                                    `json:"successMinimum,omitempty"`
				SuccessType         *GetEnvironment200PolicySuccessType         `json:"successType,omitempty"`
				SystemId            *string                                     `json:"systemId,omitempty"`
			} `json:"policy"`
			PolicyId        *string `json:"policyId"`
			ReleaseChannels []struct {
				ChannelId     *string `json:"channelId,omitempty"`
				DeploymentId  *string `json:"deploymentId,omitempty"`
				EnvironmentId *string `json:"environmentId,omitempty"`
				Id            *string `json:"id,omitempty"`
			} `json:"releaseChannels"`
			ResourceFilter *map[string]interface{} `json:"resourceFilter,omitempty"`
			SystemId       string                  `json:"systemId"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Error string `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseUpdateJobAgentResponse parses an HTTP response from a UpdateJobAgentWithResponse call
func ParseUpdateJobAgentResponse(rsp *http.Response) (*UpdateJobAgentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateJobAgentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Id          string `json:"id"`
			Name        string `json:"name"`
			WorkspaceId string `json:"workspaceId"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAgentRunningJobResponse parses an HTTP response from a GetAgentRunningJobWithResponse call
func ParseGetAgentRunningJobResponse(rsp *http.Response) (*GetAgentRunningJobResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAgentRunningJobResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []struct {
			Config         map[string]interface{}  `json:"config"`
			Deployment     *map[string]interface{} `json:"deployment,omitempty"`
			Environment    *map[string]interface{} `json:"environment,omitempty"`
			ExternalId     *string                 `json:"externalId"`
			Id             string                  `json:"id"`
			JobAgentConfig map[string]interface{}  `json:"jobAgentConfig"`
			JobAgentId     string                  `json:"jobAgentId"`
			Message        string                  `json:"message"`
			Release        *map[string]interface{} `json:"release,omitempty"`
			Runbook        *map[string]interface{} `json:"runbook,omitempty"`
			Status         string                  `json:"status"`
			Target         *map[string]interface{} `json:"target,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAcknowledgeAgentJobResponse parses an HTTP response from a AcknowledgeAgentJobWithResponse call
func ParseAcknowledgeAgentJobResponse(rsp *http.Response) (*AcknowledgeAgentJobResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AcknowledgeAgentJobResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Job *map[string]interface{} `json:"job,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Error *string `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Error *string `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetNextJobsResponse parses an HTTP response from a GetNextJobsWithResponse call
func ParseGetNextJobsResponse(rsp *http.Response) (*GetNextJobsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetNextJobsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Jobs *[]struct {
				// Id The job ID
				Id                  string                 `json:"id"`
				JobAgentConfig      map[string]interface{} `json:"jobAgentConfig"`
				JobAgentId          string                 `json:"jobAgentId"`
				Message             string                 `json:"message"`
				ReleaseJobTriggerId string                 `json:"releaseJobTriggerId"`
				Status              string                 `json:"status"`
			} `json:"jobs,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetJobResponse parses an HTTP response from a GetJobWithResponse call
func ParseGetJobResponse(rsp *http.Response) (*GetJobResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetJobResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Approval *struct {
				// Approver Null when status is pending, contains approver details when approved or rejected
				Approver *struct {
					Id   string `json:"id"`
					Name string `json:"name"`
				} `json:"approver"`
				Id     string                  `json:"id"`
				Status GetJob200ApprovalStatus `json:"status"`
			} `json:"approval"`
			CreatedAt  time.Time `json:"createdAt"`
			Deployment *struct {
				Id         string  `json:"id"`
				JobAgentId string  `json:"jobAgentId"`
				Name       *string `json:"name,omitempty"`
				Slug       string  `json:"slug"`
				SystemId   string  `json:"systemId"`
			} `json:"deployment,omitempty"`
			Environment *struct {
				Id       string `json:"id"`
				Name     string `json:"name"`
				SystemId string `json:"systemId"`
			} `json:"environment,omitempty"`

			// ExternalId External job identifier (e.g. GitHub workflow run ID)
			ExternalId *string `json:"externalId"`
			Id         string  `json:"id"`

			// JobAgentConfig Configuration for the Job Agent
			JobAgentConfig map[string]interface{} `json:"jobAgentConfig"`
			Release        *struct {
				Config   map[string]interface{} `json:"config"`
				Id       string                 `json:"id"`
				Metadata map[string]interface{} `json:"metadata"`
				Version  string                 `json:"version"`
			} `json:"release,omitempty"`
			Resource *struct {
				Config      map[string]interface{} `json:"config"`
				Id          string                 `json:"id"`
				Identifier  string                 `json:"identifier"`
				Kind        string                 `json:"kind"`
				Metadata    map[string]interface{} `json:"metadata"`
				Name        string                 `json:"name"`
				Version     string                 `json:"version"`
				WorkspaceId string                 `json:"workspaceId"`
			} `json:"resource,omitempty"`
			Runbook *struct {
				Id         string `json:"id"`
				JobAgentId string `json:"jobAgentId"`
				Name       string `json:"name"`
				SystemId   string `json:"systemId"`
			} `json:"runbook,omitempty"`
			Status    GetJob200Status        `json:"status"`
			UpdatedAt time.Time              `json:"updatedAt"`
			Variables map[string]interface{} `json:"variables"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Error *string `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseUpdateJobResponse parses an HTTP response from a UpdateJobWithResponse call
func ParseUpdateJobResponse(rsp *http.Response) (*UpdateJobResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateJobResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Id string `json:"id"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAcknowledgeJobResponse parses an HTTP response from a AcknowledgeJobWithResponse call
func ParseAcknowledgeJobResponse(rsp *http.Response) (*AcknowledgeJobResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AcknowledgeJobResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Sucess bool `json:"sucess"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Error string `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseCreateReleaseChannelResponse parses an HTTP response from a CreateReleaseChannelWithResponse call
func ParseCreateReleaseChannelResponse(rsp *http.Response) (*CreateReleaseChannelResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateReleaseChannelResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			CreatedAt     time.Time               `json:"createdAt"`
			DeploymentId  string                  `json:"deploymentId"`
			Description   *string                 `json:"description"`
			Id            string                  `json:"id"`
			Name          string                  `json:"name"`
			ReleaseFilter *map[string]interface{} `json:"releaseFilter,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Error string `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Error string `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest struct {
			Error string `json:"error"`
			Id    string `json:"id"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Error string `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseCreateReleaseResponse parses an HTTP response from a CreateReleaseWithResponse call
func ParseCreateReleaseResponse(rsp *http.Response) (*CreateReleaseResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateReleaseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Id       *string            `json:"id,omitempty"`
			Metadata *map[string]string `json:"metadata,omitempty"`
			Version  *string            `json:"version,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest struct {
			Error *string `json:"error,omitempty"`
			Id    *string `json:"id,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseSetResourceProvidersResourcesResponse parses an HTTP response from a SetResourceProvidersResourcesWithResponse call
func ParseSetResourceProvidersResourcesResponse(rsp *http.Response) (*SetResourceProvidersResourcesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SetResourceProvidersResourcesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUpsertResourcesResponse parses an HTTP response from a UpsertResourcesWithResponse call
func ParseUpsertResourcesResponse(rsp *http.Response) (*UpsertResourcesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpsertResourcesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Count *float32 `json:"count,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteResourceResponse parses an HTTP response from a DeleteResourceWithResponse call
func ParseDeleteResourceResponse(rsp *http.Response) (*DeleteResourceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteResourceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Success bool `json:"success"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Error string `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetResourceResponse parses an HTTP response from a GetResourceWithResponse call
func ParseGetResourceResponse(rsp *http.Response) (*GetResourceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetResourceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Config     map[string]interface{} `json:"config"`
			Id         string                 `json:"id"`
			Identifier string                 `json:"identifier"`
			Kind       string                 `json:"kind"`
			LockedAt   *time.Time             `json:"lockedAt"`
			Metadata   map[string]string      `json:"metadata"`
			Name       string                 `json:"name"`
			Provider   *struct {
				Id   *string `json:"id,omitempty"`
				Name *string `json:"name,omitempty"`
			} `json:"provider"`
			UpdatedAt   time.Time         `json:"updatedAt"`
			Variable    map[string]string `json:"variable"`
			Version     string            `json:"version"`
			WorkspaceId string            `json:"workspaceId"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Error string `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseUpdateResourceResponse parses an HTTP response from a UpdateResourceWithResponse call
func ParseUpdateResourceResponse(rsp *http.Response) (*UpdateResourceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateResourceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Config      map[string]interface{} `json:"config"`
			Id          string                 `json:"id"`
			Identifier  string                 `json:"identifier"`
			Kind        string                 `json:"kind"`
			Metadata    map[string]string      `json:"metadata"`
			Name        string                 `json:"name"`
			Version     string                 `json:"version"`
			WorkspaceId string                 `json:"workspaceId"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Error string `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetSystemResponse parses an HTTP response from a GetSystemWithResponse call
func ParseGetSystemResponse(rsp *http.Response) (*GetSystemResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSystemResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Deployments []struct {
				Description    *string                 `json:"description,omitempty"`
				Id             *string                 `json:"id,omitempty"`
				JobAgentConfig *map[string]interface{} `json:"jobAgentConfig,omitempty"`
				JobAgentId     *string                 `json:"jobAgentId"`
				Name           *string                 `json:"name,omitempty"`
				Slug           *string                 `json:"slug,omitempty"`
				SystemId       *string                 `json:"systemId,omitempty"`
			} `json:"deployments"`
			Description  string `json:"description"`
			Environments []struct {
				CreatedAt      *time.Time              `json:"createdAt,omitempty"`
				Description    *string                 `json:"description"`
				ExpiresAt      *time.Time              `json:"expiresAt"`
				Id             *string                 `json:"id,omitempty"`
				Name           *string                 `json:"name,omitempty"`
				PolicyId       *string                 `json:"policyId"`
				ResourceFilter *map[string]interface{} `json:"resourceFilter"`
				SystemId       *string                 `json:"systemId,omitempty"`
			} `json:"environments"`
			Id          string `json:"id"`
			Name        string `json:"name"`
			Slug        string `json:"slug"`
			WorkspaceId string `json:"workspaceId"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpsertResourceProviderResponse parses an HTTP response from a UpsertResourceProviderWithResponse call
func ParseUpsertResourceProviderResponse(rsp *http.Response) (*UpsertResourceProviderResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpsertResourceProviderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Id          string `json:"id"`
			Name        string `json:"name"`
			WorkspaceId string `json:"workspaceId"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteResourceByIdentifierResponse parses an HTTP response from a DeleteResourceByIdentifierWithResponse call
func ParseDeleteResourceByIdentifierResponse(rsp *http.Response) (*DeleteResourceByIdentifierResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteResourceByIdentifierResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Success *bool `json:"success,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Error *string `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetResourceByIdentifierResponse parses an HTTP response from a GetResourceByIdentifierWithResponse call
func ParseGetResourceByIdentifierResponse(rsp *http.Response) (*GetResourceByIdentifierResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetResourceByIdentifierResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Id         string             `json:"id"`
			Identifier string             `json:"identifier"`
			Metadata   *map[string]string `json:"metadata,omitempty"`
			Provider   *struct {
				Id          *string `json:"id,omitempty"`
				Name        *string `json:"name,omitempty"`
				WorkspaceId *string `json:"workspaceId,omitempty"`
			} `json:"provider,omitempty"`
			ProviderId string `json:"providerId"`
			Variables  *[]struct {
				Id    *string `json:"id,omitempty"`
				Key   *string `json:"key,omitempty"`
				Value *string `json:"value,omitempty"`
			} `json:"variables,omitempty"`
			WorkspaceId string `json:"workspaceId"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Error *string `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}
